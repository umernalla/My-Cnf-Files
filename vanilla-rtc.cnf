!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
! REAL-TIME CONNECTOR CONFIGURATION DATABASE
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
! License config section
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

*rtc*licenseFile : ../../etc/REFINITIV_LICENSE
*rtc*licenseValidatingTime :

!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
! Source Adapter config section
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

*rtc*marketDataAgentList : SSL
*rtc*transportType : TCP

!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
! SSL/RSSL Host Transport config section
! Used when marketDataAgentList is set to SSL/TCP
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

!!! Refinitiv Real-Time Optimized Services
*rtc*serviceDiscoveryUrl :  https://api.refinitiv.com/streaming/pricing/v1/
*rtc*oAuthPasswordGrant*tokenServiceUrl : https://api.refinitiv.com/auth/oauth2/v1/token
*rtc*oAuthClientCred*tokenServiceUrl : https://api.refinitiv.com/auth/oauth2/v2/token
!*rtc*tokenReissueRatio : 0.80

*rtc*applicationId : 174
*rtc*routeList :

!!! SSL Route
*rtc*hostssl.route*port : distribution_ssl_sink
*rtc*hostssl.route*hostList : adshosta, adshostb
*rtc*hostssl.route*protocol : sslauto
*rtc*hostssl.route*singleOpen : True
*rtc*hostssl.route*compressionType : 1
*rtc*hostssl.route*tcpRecvBufSize : 2097152
*rtc*hostssl.route*tcpSendBufSize : 64240
*rtc*hostssl.route*maxCache : 100000
!*rtc*hostssl.route*pingInterval : 2
!*rtc*hostssl.route*numIpcOutputBuffers : 100
!*rtc*hostssl.route*userName : DACS_CASCADE
!*rtc*hostssl.route*statusTextIntroducer : *
!*rtc*hostssl.route*serviceList : IDN_RDF, BRIDGE_PAGES
!*rtc*hostssl.route*blockedServiceList :
!*rtc*hostssl.route*IDN_RDF*appServiceName : IDN_RDF
!*rtc*hostssl.route*IDN_RDF*maxCache : 50000
!*rtc*hostssl.route*BRIDGE_PAGES*appServiceName : BRIDGE_PAGES
!*rtc*hostssl.route*BRIDGE_PAGES*maxCache : 50000

!!! RSSL Route
*rtc*hostrssl.route*port : distribution_rssl_sink
*rtc*hostrssl.route*hostList : adshosta, adshostb
*rtc*hostrssl.route*protocol : rssl
*rtc*hostrssl.route*singleOpen : True
*rtc*hostrssl.route*compressionType : 1
*rtc*hostrssl.route*tcpRecvBufSize : 2097152
*rtc*hostrssl.route*tcpSendBufSize : 2097152
*rtc*hostrssl.route*maxCache : 500000
!*rtc*hostrssl.route*roundTripLatency : True
!*rtc*hostrssl.route*rsslConnectionType : socket
!*rtc*hostrssl.route*encryptionProtocol : TLSv1.2
!*rtc*hostrssl.route*sslCAStore :
!*rtc*hostrssl.route*proxyHost :
!*rtc*hostrssl.route*proxyPort :
!*rtc*hostrssl.route*pingInterval : 2
!*rtc*hostrssl.route*persistentMount : False
!*rtc*hostrssl.route*maxIncomingUnconfirmedMessages : 1000
!*rtc*hsotrssl.route*maxOutgoingUnconfirmedMessages : 10
!*rtc*hostrssl.route*numIpcOutputBuffers : 400
!*rtc*hostrssl.route*userName : DACS_CASCADE
!*rtc*hostrssl.route*statusTextIntroducer : *
!*rtc*hostrssl.route*serviceList : ELEKTRON_DD
!*rtc*hostrssl.route*blockedServiceList :
!*rtc*hostrssl.route*ELEKTRON_DD*appServiceName : ELEKTRON_DD
!*rtc*hostrssl.route*ELEKTRON_DD*maxCache : 50000
!*rtc*hostrssl.route*ELEKTRON_DD*serverCost : 0

!!! ERT Cloud Route
*rtc*cloud.route*protocol : rssl
*rtc*cloud.route*singleOpen : True
*rtc*cloud.route*compressionType : 1
*rtc*cloud.route*tcpRecvBufSize : 2097152
*rtc*cloud.route*tcpSendBufSize : 524288
*rtc*cloud.route*maxCache : 50000
*rtc*cloud.route*useReactor : True
*rtc*cloud.route*roundTripLatency : True
*rtc*cloud.route*rsslConnectionType : encrypted
*rtc*cloud.route*encryptionProtocol : TLSv1.2
*rtc*cloud.route*sslCAStore :
*rtc*cloud.route*proxyHost :
*rtc*cloud.route*proxyPort :
*rtc*cloud.route*authenticationMethod : oAuthPasswordGrant
*rtc*cloud.route*serviceDiscovery : True
*rtc*cloud.route*location : us-east
*rtc*cloud.route*pingInterval : 10
*rtc*cloud.route*numIpcOutputBuffers : 400
*rtc*cloud.route*userName :
*rtc*cloud.route*userPassword :
*rtc*cloud.route*statusTextIntroducer : *
*rtc*cloud.route*serviceList : ELEKTRON_DD, ERT_FD3_LF1
!*rtc*cloud.route*blockedServiceList :
*rtc*cloud.route*ELEKTRON_DD*appServiceName : ELEKTRON_DD
*rtc*cloud.route*ELEKTRON_DD*maxCache : 50000
*rtc*cloud.route*ELEKTRON_DD*serverCost : 0
*rtc*cloud.route*ERT_FD3_LF1*appServiceName : ERT_FD3_LF1
*rtc*cloud.route*ERT_FD3_LF1*maxCache : 50000
*rtc*cloud.route*ERT_FD3_LF1*serverCost : 0

!!! Tunnel Stream Aggregation (TSA) Route
*rtc*trcc.route*port : 443
*rtc*trcc.route*hostList :
*rtc*trcc.route*protocol : rssl
*rtc*trcc.route*singleOpen : True
*rtc*trcc.route*compressionType : 1
*rtc*trcc.route*tcpRecvBufSize : 2097152
*rtc*trcc.route*tcpSendBufSize : 2097152
*rtc*trcc.route*numIpcOutputBuffers : 400
*rtc*trcc.route*useReactor : True
*rtc*trcc.route*rsslConnectionType : encrypted
*rtc*trcc.route*encryptionProtocol : TLSv1.2
*rtc*trcc.route*proxyHost :
*rtc*trcc.route*proxyPort :
*rtc*trcc.route*pingInterval : 10
*rtc*trcc.route*numIpcOutputBuffers : 400
*rtc*trcc.route*enableOnInboundThreads : False
*rtc*trcc.route*userName : distribution
*rtc*trcc.route*serviceList : DDS_TRCE
!*rtc*trcc.route*blockedServiceList :
*rtc*trcc.route*DDS_TRCE*appServiceName : DDS_TRCE
*rtc*trcc.route*DDS_TRCE*maxCache : 50000
*rtc*trcc.route*DDS_TRCE*enableTunnelStreamAggregation : True
*rtc*trcc.route*DDS_TRCE*tunnelStream*userName :
*rtc*trcc.route*DDS_TRCE*tunnelStream*userPassword :
*rtc*trcc.route*DDS_TRCE*tunnelStream*numIpcOutputBuffers : 400

!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
! NIP Server
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

!!! Classic SSL Source for SSL 3.X and SSL4.0 APIs
!*rtc*listenOnSourcePort : False
!*rtc*serverName : distribution_ssl_source

!!! NIP user permission check
*rtc*checkNIPServicePerm : False
*rtc*disconnectNoNIPServicePerm : True

!!! RSSL
*rtc*enableRsslServer : False
!*rtc*rsslServerPort : distribution_rssl_source
!*rtc*distribution_rssl_source*serverToClientPings : True
!*rtc*distribution_rssl_source*clientToServerPings : True
!*rtc*distribution_rssl_source*pingTimeout : 30
!*rtc*distribution_rssl_source*minPingTimeout : 6
!*rtc*distribution_rssl_source*maxConnections : 100
!*rtc*distribution_rssl_source*guaranteedOutputBuffers : 200
!*rtc*distribution_rssl_source*maxOutputBuffers : 400
!*rtc*distribution_rssl_source*compressionType : 0
!*rtc*distribution_rssl_source*zlibCompressionLevel : 3
!*rtc*distribution_rssl_source*interfaceName :
!*rtc*distribution_rssl_source*reusePort : False
!*rtc*distribution_rssl_source*connectionType : 0
!*rtc*distribution_rssl_source*serverCert :
!*rtc*distribution_rssl_source*serverPrivateKey :

!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
! Multicast Publishing Config Section
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

*rtc*enableNIPServer : False
!*rtc*nip.source.RRCP*useIpMulticast : True
!*rtc*nip.source.RRCP*network :
!*rtc*nip.source.RRCP*recvMultAddress :
!*rtc*nip.source.RRCP*sendMultAddress :
!*rtc*nip.source.RRCP*PPPort :
!*rtc*nip.source.RRCP*MCSendToPort :
!*rtc*nip.source.RRCP*MCSendFromPort :
!*rtc*nip.source.RRCP*MCRecvPort :
!*rtc*nip.source.RRCP*bindRRCPEngineThread :
!*rtc*nip.source.RRCP*logger*file : ./rrcp.nip.source.log

!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
! Market Data Formats config section
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

!!! Service Type
*rtc*dataType : 6
*rtc*IDN_RDF*dataType : 2
*rtc*BRIDGE_PAGES*dataType : 1

!!! Reserved ServiceIds
!*DF_LEV_ONE*serviceId : 60
!*DF_NASD*serviceId : 61
!*DF_SIAC*serviceId : 62
!*DF_OPRA*serviceId : 63
!*DF_ECN*serviceId : 64
!*DF_INET*serviceId : 65
!*DF_ARCA*serviceId : 66
!*DF_LEV2*serviceId : 67
!*DF_NQD*serviceId : 68
!*DF_OBK*serviceId : 69
!*DF_TL1*serviceId : 70
!*DF_NOV*serviceId : 71
!*DF_CEF*serviceId : 72
!*DF_HKS*serviceId : 73

!!! Field dictionary and enumerated types definitions
*fieldDictionary : ../../etc/RDMFieldDictionary
*enumFile : ../../etc/enumtype.def

!!! Dictionary Download
!*rtc*enableMultipartDictionary : False

!!! Data Format Conversion
!*rtc*convertToIDNStyle : True
!*rtc*convertVerifyNoSyncToCorrection : False

!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
! Cache Management config section
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

*rtc*domainsCached : ALL
*rtc*cacheLocation : ssl
*rtc*cacheType : sinkDriven
*rtc*preemption : ssl
*rtc*removeUnwatchedItems : True
*rtc*ageUnwatchedItemTime : 3600
*rtc*lockedItemThreshold : 5
*rtc*preemptUnwatchedFreeCount : 0
*rtc*dataErrorLog : True
*rtc*nonRecoverablePolling : False

!!! Estimated number of subjects
*rtc*hashTableSize : 300000

!!! Cache Preload
!*rtc*preloadPace : 100
!*rtc*ELEKTRON_DD*initialPreloadFile :
!*rtc*ELEKTRON_DD*dynamicPreloadFile :
!*rtc*ELEKTRON_DD*preloadList :
!*rtc*ELEKTRON_DD*convertSnapToNormal : False

!!! Non-Caching Items
!*rtc*nonCachingItemList :
!*rtc*nonCachingItemFile :

!!! Dump File Location
!*rtc*databaseDumpFile :
!*rtc*ELEKTRON_DD*serviceDumpFile :
!*rtc*ELEKTRON_DD*serviceTemplateDumpFile :

!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
! Service config section
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

!!! Static QoS Configuration
!*rtc*ELEKTRON_DD*qosTimeliness : REALTIME
!*rtc*ELEKTRON_DD*qosTimeInfo : 0
!*rtc*ELEKTRON_DD*qosRate : TICK_BY_TICK
!*rtc*ELEKTRON_DD*qosRateInfo : 0
!*rtc*ELEKTRON_DD*overrideProviderQos : False
!*rtc*ELEKTRON_DD*overrideFeatureQos : False

!!! Override Provider Capabilities
!*rtc*ELEKTRON_DD*overrideProviderCapabilities : False
!*rtc*ELEKTRON_DD*capabilityList : 6, 7, 8, 9, 10

!!! Item Management options
!*ELEKTRON_DD*blockedItemsFile :
!*ELEKTRON_DD*itemPriorityFile :

!!! Update Conflation
*rtc*ELEKTRON_DD*updateAggregation : False
*rtc*ELEKTRON_DD*aggregationDomains : MARKET_PRICE
*rtc*ELEKTRON_DD*aggregationInterval : 1000
!*rtc*ELEKTRON_DD*aggregationFields : 259
!*rtc*ELEKTRON_DD*disableAggregationItemList : N2_UBMS, NFCP_UBMS
!*rtc*ELEKTRON_DD*aggregationIntervalField : 4
!*rtc*ELEKTRON_DD*aggregationIntervalFieldValues :
!*rtc*ELEKTRON_DD*4.fid*positiveAggregation : 2, 39
!*rtc*ELEKTRON_DD*4.fid*negativeAggregation :
!*rtc*ELEKTRON_DD*259.fid*positiveAggregation :
!*rtc*ELEKTRON_DD*259.fid*negativeAggregation : 117

!!! Delay
*rtc*ELEKTRON_DD*delayEnabled : False
!*rtc*ELEKTRON_DD*delayConfigFile : ./delay.rules.cf
!*rtc*ELEKTRON_DD*delayPrimaryDir : ./delay1
!*rtc*ELEKTRON_DD*delaySecondaryDir : ./delay2
!*rtc*ELEKTRON_DD*remapDelayServiceId : 900
!*rtc*ELEKTRON_DD*remapDelayServiceName : dELEKTRON_DD
!*rtc*ELEKTRON_DD*domainsDelayed : MARKET_PRICE
!*rtc*ELEKTRON_DD*vendorDelayedSubjectText :
!*rtc*ELEKTRON_DD*blockedSubjectText :
!*rtc*ELEKTRON_DD*delayTrace : False
!*rtc*ELEKTRON_DD*disableDelayItemFile :
!*rtc*ELEKTRON_DD*disableDelayItemList : ^n,^NFCP_UBMS$,^N2_STORY$,^N2_UBMS$,^NR_UBMS$,^WEB_UBMS$,^d,^.+#,^[0-9]*\\.AV\\.,^[0-9]*\\.PG\\.,^[0-9]*\\.PL\\.,^[0-9]*\\.NG\\.,^[0-9]*\\.NL\\.
!*rtc*ELEKTRON_DD*blockDelayItemList : ^t
!*rtc*ELEKTRON_DD*feeliableFieldList : TRDPRC_1,TRDPRC_2,TRDPRC_3,\
!TRDPRC_4,TRDPRC_5,NETCHNG_1,HIGH_1,LOW_1,OPEN_PRC,BID,BID_1,BID_2,ASK,\
!ASK_1,ASK_2,BIDSIZE,ASKSIZE,ACVOL_1,PCTCHNG,OPEN_BID,YRHIGH,YRLOW,\
!LIFE_LOW,LIFE_HIGH,TURNOVER,MID_PRICE,MID_NET_CH,TRDVOL_1,BID_HIGH_1,\
!BID_LOW_1,YRBIDHIGH,YRBIDLOW,SEC_ACT_1,SEC_ACT_2,SEC_ACT_3,SEC_ACT_4,\
!SEC_ACT_5,DEALT_VL1,VOL_X_PRC1,WEIGHTING

!!! MQoS
! The virtual service cannot be started if the original service does not enable the feature required for the virtual service.
! Please refer to the Update Conflation section for any virtual conflate service(s).
! Please refer to the Delay section for any virtual delay service(s).
!*rtc*ELEKTRON_DD*multipleQosServiceList : dELEKTRON_DD:DELAY,cELEKTRON_DD:CONFLATE:1000,dcELEKTRON_DD:DELAY_CONFLATE:2000
!*rtc*ELEKTRON_DD*multipleQosEnableOriginalService : False
!*rtc*ELEKTRON_DD*multipleQosOverrideLockServiceId : False
!*rtc*ELEKTRON_DD*multipleQosTrace : False
!*rtc*ELEKTRON_DD*dELEKTRON_DD*.multipleQos*remappedServiceId : 901
!*rtc*ELEKTRON_DD*cELEKTRON_DD*.multipleQos*remappedServiceId : 902
!*rtc*ELEKTRON_DD*dcELEKTRON_DD*.multipleQos*remappedServiceId : 903
!*rtc*hostrssl.route*ELEKTRON_DD*dELEKTRON_DD.multipleQos*remappedServerId : 275
!*rtc*hostrssl.route*ELEKTRON_DD*cELEKTRON_DD.multipleQos*remappedServerId : 276
!*rtc*hostrssl.route*ELEKTRON_DD*dcELEKTRON_DD.multipleQos*remappedServerId : 277

!!! Field Filtering
!*rtc*ELEKTRON_DD*filterField : 259
!*rtc*ELEKTRON_DD*filterFieldValues : 113, 118, 100
!*rtc*ELEKTRON_DD*filterList*113*contains : 22, 25
!*rtc*ELEKTRON_DD*filterList*113*remove :
!*rtc*ELEKTRON_DD*filterList*118*contains :
!*rtc*ELEKTRON_DD*filterList*118*remove : 178, 32, 43, 80
!*rtc*ELEKTRON_DD*filterList*100*contains : 14
!*rtc*ELEKTRON_DD*filterList*100*remove :

!!! Provider Warm Standby
!*rtc*ELEKTRON_DD*enableProviderWarmStandby : False
!*rtc*ELEKTRON_DD*warmStandbyRoutes :
!*rtc*ELEKTRON_DD*warmStandbyFailoverNotification : False
!*rtc*ELEKTRON_DD*warmStandbyLogOpenFailures : False
!*rtc*ELEKTRON_DD*warmStandbyRetryTime : 120
!*rtc*ELEKTRON_DD*warmStandbyRetryLimit : 3
!*rtc*ELEKTRON_DD*standbyForwardInsertToSrcApp : True

!!! Provider Warm Standby Preferred Route
!*rtc*ELEKTRON_DD*enableWarmStandbyPreferredRoute : False
!*rtc*ELEKTRON_DD*warmStandbyPreferredRouteList :
!*rtc*ELEKTRON_DD*decisionTimeWarmStandbyPreferredRouteSwitchover : 60
!*rtc*ELEKTRON_DD*warmStandbyPreferredRouteDetectionTimeFormat :
!*rtc*ELEKTRON_DD*minItemsRecoveredUponWarmStandbySwitchover : 0
!*rtc*ELEKTRON_DD*maxItemsInterruptedUponWarmStandbySwitchover : 100
!*rtc*ELEKTRON_DD*warmStandbyPreferredRouteDetectionTimeInterval : 6

!!! Trade-Safe Conflation
!*rtc*ELEKTRON_DD*seqNumFollowsMarketfeedRules : True
!*rtc*ELEKTRON_DD*priorityAwareMarketfeed : True
!*rtc*ELEKTRON_DD*overrideDoNotConflate : False

!!! NAK List
!*rtc*ELEKTRON_DD*nakListMaxItems : 0
!*rtc*ELEKTRON_DD*nakListAgeOutTime : 345600

!!! Group Status Logging
!*rtc*ELEKTRON_DD*logGroupStatus : False

!!! Flow Control
*rtc*initialOpenLimit : 256
*rtc*closePace : 3200
*rtc*minimumOpenWindow : 256
*rtc*ripcFlushLimit : 6100
*rtc*sipcFlushLimit : 6100

!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
! Source Driven Service config section
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

*rtc*DIST_PUB*cacheLocation : ssl
*rtc*DIST_PUB*cacheType : sourceDriven
*rtc*DIST_PUB*maxCache : 50000
!*rtc*DIST_PUB*enforceSourceDrivenMaxCache : False
*rtc*DIST_PUB*domainsCached : ALL
!*rtc*DIST_PUB*buildCacheFromUpdates : False
!*rtc*DIST_PUB*markItemsOkOnUpdate : False
!*rtc*DIST_PUB*forwardPostUserInfo : False
!*rtc*DIST_PUB*enableOverrideInsertRecordResp : False
!*rtc*DIST_PUB*overrideClearCache : False
!*rtc*DIST_PUB*dumpAccessLockFileName :
!*rtc*DIST_PUB*dumpAuditUserInfoFileName :

!!! Blank Image Response
*rtc*convertNotInCacheToImage : False
!*rtc*clearNotInCacheImageWhenActive : False
!*rtc*notInCacheData : DSPLY_NAME, Not In Cache
!*rtc*notInCacheFLN :

!!! Persistent Cache
*rtc*supportPersistentCache : False
!*rtc*enablePersistentOnShutdown : False
!*rtc*persistentCacheDirectory : ./persistence
!*rtc*persistentCacheServiceList : DIST_PUB
!*rtc*DIST_PUB*persistentRestoreAsStale : True
!*rtc*DIST_PUB*persistentCacheDomains : MARKET_PRICE
!*rtc*ignorePersistentOnStartupServiceList :

!!! Cache Resiliency
*rtc*supportCacheResiliency : False

!!! Cache Resiliency Server
!*rtc*DIST_PUB*cacheResDomains : MARKET_PRICE
!*rtc*CacheResiliency*listenPort : distribution_cacheres_sink
!*rtc*CacheResiliency*cacheResDownloadPace : 50000
!*rtc*distribution_cacheres_sink*serverToClientPings : True
!*rtc*distribution_cacheres_sink*clientToServerPings : True
!*rtc*distribution_cacheres_sink*pingTimeout : 30
!*rtc*distribution_cacheres_sink*minPingTimeout : 6
!*rtc*distribution_cacheres_sink*maxConnections : 100
!*rtc*distribution_cacheres_sink*guaranteedOutputBuffers : 200
!*rtc*distribution_cacheres_sink*maxOutputBuffers : 400
!*rtc*distribution_cacheres_sink*compressionType : 0
!*rtc*distribution_cacheres_sink*zlibCompressionLevel : 3
!*rtc*distribution_cacheres_sink*interfaceName :
!*rtc*distribution_cacheres_sink*reusePort : False
!*rtc*distribution_cacheres_sink*connectionType : 0
!*rtc*distribution_cacheres_sink*serverCert :
!*rtc*distribution_cacheres_sink*serverPrivateKey :

!!! Cache Resiliency Client
!*rtc*CacheResiliency*serviceList : DIST_PUB
!*rtc*DIST_PUB*CacheResiliency*hostList :
!*rtc*DIST_PUB*CacheResiliency*port : distribution_cacheres_sink
!*rtc*DIST_PUB*CacheResiliency*compressionType : 0
!*rtc*DIST_PUB*CacheResiliency*rsslConnectionType : socket
!*rtc*DIST_PUB*CacheResiliency*sslCAStore :

!!! Non-interactive Source Aggregation
!*rtc*aggregateServiceList : DIST_PUB
*rtc*DIST_PUB*nonInteractiveSourceList : DIST_PUB
*rtc*DIST_PUB*markGroupsSuspectOnPublisherDown : True
*rtc*DIST_PUB*suspectOnLastPublisherDown : False
*rtc*DIST_PUB*leaveInactiveItemsInCache : False
*rtc*DIST_PUB*manageSourceGroups : False
*rtc*DIST_PUB*uniqueGroupThreshold : 5
*rtc*DIST_PUB*commonGroupThreshold : 100
*rtc*DIST_PUB*defaultSourceGroupList :

!!! AutoExpiry
!*rtc*DIST_PUB*autoExpiryItemBaseline : update
!*rtc*DIST_PUB*autoExpiryItemTimeUnits : days
!*rtc*DIST_PUB*autoExpiryItemTimeout : 0
!*rtc*DIST_PUB*autoExpiryMaxListSize : 0

!!! Visible Publisher Identifier (VPI)
!*rtc*DIST_PUB*enableVisiblePublisherId : False
!*rtc*DIST_PUB*enableVPIDownstream : True
!*rtc*DIST_PUB*enableVPIUpstream : False
!*rtc*DIST_PUB*vpiUserIdFID :
!*rtc*DIST_PUB*vpiUserAddrFID :

!!! Audit Timestamp
!*rtc*DIST_PUB*enableAuditTimestamp : False
!*rtc*DIST_PUB*enableAuditTimestampDownstream : True
!*rtc*DIST_PUB*enableAuditTimestampUpstream : False
!*rtc*DIST_PUB*auditTimestampDateFID :
!*rtc*DIST_PUB*auditTimestampTimeFID :

!!! Non-interactive Cache for posting
!*rtc*cacheServiceList : DIST_CACHE
*rtc*DIST_CACHE*cacheLocation : ssl
*rtc*DIST_CACHE*cacheType : sourceDriven
*rtc*DIST_CACHE*maxCache : 50000
*rtc*DIST_CACHE*domainsCached : ALL
*rtc*DIST_CACHE*capabilityList : 6, 7, 8, 9, 10
*rtc*DIST_CACHE*buildCacheFromUpdates : False
*rtc*DIST_CACHE*markItemsOkOnUpdate : False
*rtc*DIST_CACHE*forwardPostUserInfo : False
*rtc*DIST_CACHE*dumpAccessLockFileName :
*rtc*DIST_CACHE*dumpAuditUserInfoFileName :
*rtc*DIST_CACHE*convertMfeedDataToRWF : False
*rtc*DIST_CACHE*validateMfeedToRWFConvForPosts : False
*rtc*DIST_CACHE*enableOverrideInsertRecordResp : False
*rtc*DIST_CACHE*overrideClearCache : False

!!! Publisher Augmentation
!*rtc*DIST_AUG*enablePublisherAugmentation : False
!*rtc*DIST_AUG*publisherAllowedFieldList :
!*rtc*DIST_AUG*applyPostsToCache : True
!*rtc*DIST_AUG*augRemapRefreshUpdateType :
!*rtc*DIST_AUG*augRemapUpdateType :

!!! Interactive Source Blending
!*rtc*DIST_BLEND*enableSourceBlending : False
!*rtc*DIST_BLEND*blankSecondaryFields : False
!*rtc*DIST_BLEND*logSecondaryOpenFailures : False
!*rtc*DIST_BLEND*protectPrimaryFields : False
!*rtc*DIST_BLEND*secondaryBlankRate : 1000
!*rtc*DIST_BLEND*secondaryRetryLimit : 3
!*rtc*DIST_BLEND*secondaryRetryTime : 120
!*rtc*DIST_BLEND*waitForSecondaryResponses : True

!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
! Data Quality Assurance config section
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

!!! Disconnect Sink Applications when all service(s) down. This will force
!!! all sink applications to mount to an alternate RTC where the services
!!! may be available.
*rtc*disconnectSrcDown : False

!!! Disconnect Sink Applications when ANY/ONE service down. This will force
!!! all sink applications to mount to an alternate RTC where the services
!!! may be available.
*rtc*disconnectSingleSrcDown : False

!!! Disconnect Sink Applications when ANY/ONE service in list is down. This will
!!! force all sink applications to mount to an alternate RTC where the
!!! services may be available. This parameter is only applied when the
!!! "disconnectSingleSrcDown" is set to True.
!*rtc*disconnectServiceList :

!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
! SSL/RSSL Client Transport config section
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

!!! Set compressionType to 0 to disable compression
*rtc*compressionType : 0
*rtc*zlibCompressionLevel : 3
*rtc*minCompressionThreshold : 0

*rtc*maxMounts : 256
!*rtc*maxMountsPerUser : 10
*rtc*guaranteedOutputBuffers : 200
*rtc*maxOutputBuffers : 400
*rtc*outputThresholdOK : 30
*rtc*outputThresholdBreach : 60
*rtc*poolSize : 16000

*rtc*sessionStatsWindow : 1
*rtc*persistenceRecoveryTime : 600
*rtc*flushInterval : 1
*rtc*timedWrites : True
*rtc*tcpRecvBufSize : 64240
*rtc*tcpSendBufSize : 64240
*rtc*logMountRequests : False

*rtc*allowSSLConnections : True
*rtc*portList : distribution_ssl_sink
*rtc*sslMsgPacking : True
*rtc*disableHostLookup : True
*rtc*interface :

*rtc*allowRSSLConnections : True
!*rtc*rsslPort : distribution_rssl_sink
!*rtc*rsslMsgPacking : True
!*rtc*distribution_rssl_sink*serverToClientPings : True
!*rtc*distribution_rssl_sink*clientToServerPings : True
!*rtc*distribution_rssl_sink*pingTimeout : 30
!*rtc*distribution_rssl_sink*minPingTimeout : 6
!*rtc*distribution_rssl_sink*interfaceName :
!*rtc*distribution_rssl_sink*reusePort : False
!*rtc*distribution_rssl_sink*connectionType : 0
!*rtc*distribution_rssl_sink*serverCert :
!*rtc*distribution_rssl_sink*serverPrivateKey :

!!! Just-In-Time Conflation
!*rtc*trafficManagement : False
!*rtc*logTrafficManagement : False

!!! Consumer Warm Standby
!*rtc*supportWarmStandby : False
!*rtc*standbyForwardInsertToAdh : True

!!! Insert/Post Throttle
!*rtc*insertThrottleMsgs : 1500
!*rtc*insertThrottleBytes : 0

!!! Batch and View Requests
!*rtc*enableBatchSnapshots : True
!*rtc*enableViews : True

!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
! WebSocket config section
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

*rtc*allowWSConnections : True
!*rtc*wsPort : distribution_ws_sink
!*rtc*wsMsgPacking : True
!*rtc*distribution_ws_sink*compressionType : 1
!*rtc*distribution_ws_sink*serverToClientPings : True
!*rtc*distribution_ws_sink*clientToServerPings : True
!*rtc*distribution_ws_sink*pingTimeout : 30
!*rtc*distribution_ws_sink*minPingTimeout : 6
!*rtc*distribution_ws_sink*interfaceName :
!*rtc*distribution_ws_sink*reusePort : False
!*rtc*distribution_ws_sink*connectionType : 0
!*rtc*distribution_ws_sink*serverCert :
!*rtc*distribution_ws_sink*serverPrivateKey :
!*rtc*distribution_ws_sink*maxOutputBuffers : 4000
!*rtc*distribution_ws_sink*poolSize : 300000

!*rtc*defaultJsonServiceId :
!*rtc*defaultJsonQosDynamic : False
!*rtc*jsonExpandedEnumFields : True
!*rtc*catchUnknownJsonKeys : False
!*rtc*catchUnknownJsonFids : True

!!! Automatic Login for Authentication
!*rtc*distribution_ws_sink*positionName : AuthPosition
!*rtc*distribution_ws_sink*applicationIdName : applicationId
!*rtc*distribution_ws_sink*authTokenName : AuthToken

!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
! REST Manageability config section
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

!*rtc*enableRest : False
!*rtc*restPort : distribution_rest_sink
!*rtc*rest*enableManageabilityResources : True
!*rtc*rest*enableSnapshotServer : False
!*rtc*rest*defaultSnapshotService :
!*rtc*rest*defaultSnapshotUserName : RestSnapshot
!*rtc*rest*restRequestTimeout : 60
!*rtc*rest*HTTPResponseHeaders : X-Frame-Options: deny, X-XSS-Protection: 1; mode=block, X-Content-Type-Options: nosniff
!*rtc*rest*allowedIPAddressList :
!*rtc*enableRestAudit : False
!*rtc*restAudit*file : ./rtc.rest.log
!*rtc*restAudit*max_bytes : 3000000
!*rtc*restAudit*max_swapfiles : 0
!*rtc*restAudit*timeStampFormat : %a %b %d  %H:%M:%S %Y
!*rtc*restAudit*microSecTimeStamps : False
!*rtc*rest*securityKey :
!*rtc*rest*itemdb*securityKey :
!*rtc*rest*configs*securityKey :
!*rtc*rest*sharedmem*GET.method*securityKey :
!*rtc*rest*sharedmem*PUT.method*securityKey :
!*rtc*rest*snapshot*securityKey :
!*rtc*distribution_rest_sink*connectionType : 0
!*rtc*distribution_rest_sink*serverCert :
!*rtc*distribution_rest_sink*serverPrivateKey :

!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
! Thread config section
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

*rtc*primeTopology : True

*rtc*bindThreadsByDefault :
*rtc*bindMainThread :
*rtc*bindAggStatsThread :
*rtc*bindDNSThread :

!!! Channel Threads
!*rtc*numChannelThreads : 2
!*rtc*1.sourceChannelThread*bindChannelThread :
!*rtc*2.sourceChannelThread*bindChannelThread :

!!! Item Threads
!*rtc*numItemThreads : 2
!*rtc*1.itemThread*bindItemThread :
!*rtc*2.itemThread*bindItemThread :

!!! Writer Threads
*rtc*writerThreadCount : 4
*rtc*bindWriteThread.1 :
*rtc*bindWriteThread.2 :
*rtc*bindWriteThread.3 :
*rtc*bindWriteThread.4 :

!!! REST Thread
!*rtc*restThread*bindRestThread :

!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
! User config section
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

!*rtc*aggregateItemLimit : 2400
!*rtc*itemLimit : 2400
!*rtc*itemLimitPerMount :

!*rtc*defaultPriorityClass : 1
!*rtc*maxPriorityClass : 1
!*rtc*pingInterval : 30
!*rtc*pingKillInterval : 60
!*rtc*logNonRecoverableOpens : False

!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
! Admin Config Section
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

*rtc*logger*selector : *.info
*rtc*logger*file : ./rtc.log
*rtc*logger*max_bytes : 3000000
!*rtc*logger*max_swapfiles : 0
!*rtc*logger*logDtMsgTogether : False
!*rtc*logger*timeStampFormat : %a %b %d  %H:%M:%S %Y
!*rtc*logger*microSecTimeStamps : False

*rtc*admin*sharedMemoryKey : 82
*rtc*admin*semaphoreKey : 82
*rtc*admin*sharedMemorySize : 12000000
*rtc*admin*maxClients : 5

!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
! DACS Parameters
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

*rtc*dacs*featureEnabled : False
!*rtc*dacs*fileDirectory : ./
!*rtc*dacs*fileSize : 6000
!*rtc*dacs*logFlushInterval : 20
!*rtc*dacs*connectRetryInterval : 10
!*rtc*dacs*usageLoggingLevel: External
!*rtc*dacs*usageFileName : DACS_usage.log
!*rtc*disconnectDacsDown : False
!*rtc*refuseConnectionsDacsDown : False
!*rtc*softwareStatsReportTime :

!!! DACS Multi-Connect
*rtc*dacs*doMultiConnect : False
!*rtc*dacs*domainList : DACS_CHICAGO, DACS_NEW_YORK
!*rtc*dacs*DACS_CHICAGO*port : 8211
!*rtc*dacs*DACS_CHICAGO*forceLetterCase4Login : None
!*rtc*dacs*DACS_NEW_YORK*port : 9111
!*rtc*dacs*DACS_NEW_YORK*forceLetterCase4Login : None

!!! To control publisher (source) versus consumer (sink) side.
!*rtc*source*dacs*featureEnabled : True
!*rtc*source*dacs*doMultiConnect : True
!*rtc*sink*dacs*featureEnabled : True
!*rtc*sink*dacs*doMultiConnect : True

!!! Authentication
*rtc*authentication*tokenAuthenticationHosts :
*rtc*authentication*authThreads : 1
*rtc*authentication*connectTimeout : 15
*rtc*authentication*compatibilityMode : allow
*rtc*authentication*iauth2Trace : False

!!! Continuous Watch
!!! crontab(5) format
!!! "12:01 am on the 1st of the month"
!*rtc*dacs*publisherWatchFormat : 1 0 1 * *
!*rtc*dacs*watchFormat : 1 0 1 * *
*rtc*dacs*maxStaggerMinutes : 60
*rtc*dacs*watchTimerOpenHours : 24

!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
! Miscellaneous config section
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

!!! Posting / Inserts
*rtc*insertAction : lowest
*rtc*insertTimeout : 30
*rtc*auditTimeStampUpdateInterval: 20

!!! Create Permission Data from PROD PERM
*rtc*createAccessLocks : False
*rtc*createLockForPEZero : False
*rtc*createInsertLocks : False

!!! Override Service Id in DACS Access Lock
*rtc*overrideLockServiceId : False

!!! Map Entry Entitlement Checks
!*rtc*mapEntryEntitlements : False
!*rtc*logMapEntryUsage : False

!!! Headline Permissioning
*rtc*newsNameList : N2_UBMS NFCP_UBMS
*rtc*headlinePermissioning : True
*rtc*headlinePermissioningLogging : False

!!! Retry Times
!*rtc*normalRetryLimit : -1
!*rtc*normalRetryText :
*rtc*normalRetryTime : 120

!!! Pending Out Timeout
!*rtc*pendingToSrcAppTimeout : 5

!!! Latency Monitoring
!*rtc*latencyCalcEnabled : False
!*rtc*numLatencySamples : 150
!*rtc*latencyCalcMountBased : False
!*rtc*latencyCalcServerBased : False

!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
! END OF RTC CONFIGURATION DATABASE
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
! Note: All parameters defined with ${svc} are optionally configurable
! on a per service basis.
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
! PARAMETER DESCRIPTION SECTION
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
![Source Adapter]
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*marketDataAgentList : SSL
!#help
!    marketDataAgentList: { RRMP, SSL}
!
!    Specifies the market data adapter that the RTC will use to
!    retrieve network from an upstream site.
!
!    RRMP is the default configuration and allows it to communicate
!    with the ADHs on the RRMP backbone.
!
!    SSL allows the RTC to communicate via the SSL API to an upstream RTC.
!
!    For all platforms, a cascading capability license will be required
!    for SSL.
!
!    Note: This configuration file ONLY contains parameters necessary
!    for the SSL market data agent.
!
!    Default value: SSL
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*transportType : TCP
!#help
!   transportType:  { RRCP, TCP }
!
!   Controls the source transport type that is used by the RTC.
!   Supported market data agent/transport types are:
!
!       RRMP/RRCP, SSL/TCP
!
!   Default value: TCP
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
! [SSL/RSSL Host Transport]
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*serverName : distribution_ssl_source
!#help
! serverName:
!
! Defines the name of the well-known socket on which the IPC server will
! accept IPC connections from SSL users.
! NOTE: If the name contains more than one word, the words must be separated
! with a non-whitespace character. The name may not exceed 24 characters.
!
! Default value: distribution_ssl_source
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${route}".route*serviceList : ELEKTRON_DD
!#help
!    serviceList: serviceName1, serviceName2, ...
!
!    A comma-separated list of the services to be provided by this
!    RTC. The names on this list are the names of the services as
!    published on the client network. The optional appServiceName parameter
!    defines the service name as published by the host site.
!
!    If the serviceList is empty, then the RTC will automatically be set
!    to accept a request on any service.  In this case specific services
!    can be listed to not be provided with blockedServiceList.
!
!    Default value: <empty>
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${route}".route*blockedServiceList :
!#help
!    blockedServiceList: serviceName1, serviceName2, ...
!
!    This parameter can be used to exclude specific services from being
!    started, if all services are being accepted because serviceList
!    is empty.  This parameter will only be read if serviceList is empty.
!
!    Default value: <empty>
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${route}".route*port : distribution_ssl_sink
!#help
!    port: <port>
!
!    The port number or name used for this route. This value can be
!    specified as a port number (e.g. 8101) or a port name defined in
!    /etc/services (e.g. distribution_ssl_sink).
!
!    Default value: distribution_ssl_sink
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${route}".route*hostList : adshosta, adshostb
!#help
!    hostList: <host1>, <host2>, ...
!
!    A comma-separated list of hostnames for this "route". When attempting
!    to connect this route, the hosts are tried as ordered in this list.
!
!    Default value: <empty>
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${route}".route*userName : DACS_CASCADE
!#help
!    userName: <username>
!
!    The user name for this route. It is specified on the RTC cascaded mount
!    when the route is connected. Primarily for DACS permissioning. This value
!    should not be changed if permissioning is turned on for cascaded
!    RTC connections. This user name is reserved exclusively for cascaded
!    connections between the RTC/Host and RTC.
!
!    If additional mounts are made to other sources, then the user name
!    for those routes should be different from "DACS_CASCADE".
!
!    Default value: <login name>
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${route}".route*protocol : rssl
!#help
!    protocol: { rssl, sslauto, ssl40be, ssl45, ssl40 }
!
!    This parameter specifies the protocol used in establishing the upstream
!    connection. Either a numeric value or a string may be specified from
!    the following list:
!
!    5 or rssl      RSSL protocol
!    4 or sslauto   Automatically selects the best SSL protocol
!    3 or ssl40be   SSL 4.0 protocol with bandwidth-enhancements
!    2 or ssl45     SSL 4.5 protocol
!    1 or ssl40     SSL 4.0 protocol
!
!    The sslauto value indicates that the connection should be negotiated with
!    the upstream device. The ssl40be protocol is tried first. If the upstream
!    device does not support the ssl40be protocol, the connection is made using
!    either the ssl45 protocol or the ssl40 protocol (depending on the upstream
!    device).
!
!    Default value: rssl
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${route}".route*singleOpen : True
!#help
!    singleOpen: { True, False }
!
!    The singleOpen parameter controls whether the single open option
!    is enabled when making the connection. The single open option specifies
!    where the recovery of a recoverably closed item occurs. If this parameter
!    is True, this component expects that recoverably closed items will be
!    recovered for it by upstream components (these items will receive a stale
!    status while recovery is ongoing). If this parameter is False, this
!    downstream components will have to do recovery themselves (and
!    recoverably closed items will be removed from this component cache.
!
!    Recommendation: If this component is the only server within its service,
!    set this parameter to True. If other servers exist within the service,
!    set this parameter to False.
!
!    Note: When singleOpen is enabled for RSSL routes, disconnectServiceDown
!    will be forced to False and the local service will remain Up when the
!    upstream service goes Down.
!
!    Default value: True
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${route}".route*allowSuspectData : True
!#help
!    allowSuspectData: { True, False }
!
!    This parameter specifies whether the receiving device wants suspect data
!    converted into recoverable closes. The RTC does not distinguish
!    between a data state that is okay and a data state that is stale. This
!    means that if there is more than one server in a service (load-balanced
!    configuration), a server should not publish stale data -- because the
!    other server may have the same data available in an okay data state.
!
!    Note: If singleOpen is enabled (True), it takes precedence and this
!    parameter is ignored.
!
!    This parameter only applies to RSSL routes.
!
!    Default value: True
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${route}".route*disableDataConversion : True
!#help
!    disableDataConversion: { True, False }
!
!    This parameter specifies whether the receiving device wants Marketfeed
!    data converted into RWF. If True, the upstream RTC will not convert
!    Marketfeed data into RWF for this connection.
!
!    This parameter only applies to RSSL routes.
!
!    Default value: True
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${route}".route*compressionType : 1
!#help
!    compressionType: { 0 - 2 }
!
!    The upstream component may support data compression, which saves
!    bandwidth at the expense of CPU utilization. This component asks for
!    compressed data by specifying, during the sink mount, the decompressor
!    that it has available. In the mount acknowledgement, the upstream
!    component indicates whether the data will be compressed, or not.
!
!    The compressionType parameter specifies the compression type that this
!    component can decompress. There are currently two defined compression
!    types:
!
!            0: No compression
!            1: Z-lib compression
!            2: LZ4 compression (RSSL only)
!
!    Some compressors (e.g. Z-lib) have multiple compression levels (which
!    trade off compression versus CPU utilization). The upstream component
!    chooses the compression level. LZ4 compression is not supported
!    for SSL and WebSocket based connections.
!
!    If compressionType is zero (0), data compression is disabled.
!
!    Default value: 1 (Z-lib compression)
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${route}".route*minCompressionThreshold : 0
!#help
!    minCompressionThreshold: { 0 - N }
!
!    If compression is enabled, any message larger than this value will be
!    compressed. If this parameter is set to 0 then for zlib it will default
!    to 30 and for LZ4 it will default to 300. In case a value less than 30
!    is given then it will default to 30.
!
!    Default value: 30  (zlib)
!                   300 (LZ4)
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${route}".route*roundTripLatency : True
!#help
!   roundTripLatency: { True, False }
!
!   Enable tracking of round trip latency and TCP retranmissions on hosted (ERT Cloud, EaaS)
!   and cascaded connections.
!
!   Default value: True
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${route}".route*pingInterval : 2
!#help
!    pingInterval: { 1 - N seconds }
!
!    The number of seconds between ping messages. This value is passed to
!    the SSL API and RSSL API which negotiates the ping interval and ping
!    timeout values with the other side. The connection will be broken (and
!    downstream consumers will be notified) if no message is received for
!    ping timeout seconds (ping timeout is normally equal to three times
!    the pingInterval).
!
!    Default value: 2
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${route}".route*routeEnabled : True
!#help
!    routeEnabled: { True, False }
!
!    This parameter is used to determine whether the route is enabled on startup.
!    If False, the route will be created but no channels or servers will be started.
!    Adminstrators can later enable the route through shared memory.
!
!    Default value: True
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${route}".route*numIpcOutputBuffers : 400
!#help
!   numIpcOutputBuffers: { 2 - 3000 }
!
!   This parameter is used to define the number of maximum output buffers that are
!   allocated per channel to handle and store outgoing messages. When the output
!   buffers in use exceed 60% utilization and fall below 30% utilization of this value,
!   the RTC will log output threashold breach and output threshold OK notifications
!   respectively.
!
!   NOTE: For providers performing single-part dictionary download, this value
!   may need to be increased for extremely large dictionaries should the provider
!   not be receiving a response from the RTC on dictionary requests. Notification
!   will be logged to the RTC log file when that condition occurs. Alternatively,
!   should the provider application support, enableMultipartDictionary can be set
!   to True to have the RTC send the dictionary response in multiple parts.
!
!   Default value: 400
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${route}".route*disconnectOnGenericOverflow : False
!#help
!    disconnectOnGenericOverflow:  { True, False }
!
!    This parameter determines whether or not the route should temporarily disconnect
!    when an attempt to send a generic message causes the output buffer to overflow.
!
!    Default value: False
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${route}".route*persistentMount : False
!#help
!    persistentMount:  { True, False }
!
!    This parameter will enable the RSSL route to be persistent,
!    if the persistent mount option is supported by the upstream component.
!    When the route gets disconnected, the mount persists in the upstream component
!    and still maintains the list of items being watched for a time period controlled
!    by the persistentRecoveryTime configuration parameter in the upstream component.
!    Upon reconnection, the persistent route resumes all item streams and receives
!    an unsolicited image for each item missing updates during disconnection.
!    The persistent mount also accounts for outbound messages, such as post messages.
!
!    Default value: False
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${route}".route*maxIncomingUnconfirmedMessages : 1000
!#help
!    maxIncomingUnconfirmedMessages:  { 0 - N }
!
!    This parameter is applicable only if the persistentMount is set to True.
!    This parameter controls how often the generic message gets sent on the login
!    stream by the upstream component for sequence number synchronization purpose.
!    The upstream component will not send the generic message until the number of
!    unconfirmed outgoing messages is greater than the maxIncomingUnconfirmedMessages
!    configuration parameter.
!    The upstream component will also send the generic message after the ping message,
!    if there are no outgoing messages during the ping interval.
!    Upon receiving the generic message, the RTC will send the generic message
!    acknowledgement back to the upstream component to synchronize the internal
!    sequence number.
!
!    Default value: 1000
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
!*rtc*"${route}".route*maxOutgoingUnconfirmedMessages : 10
!#help
!    maxOutgoingUnconfirmedMessages:  { 0 - N }
!
!    This parameter is applicable only if the persistentMount is set to True.
!    This parameter controls how often the RTC sends generic message on the login
!    stream for sequence number synchronization purpose.
!    The RTC will not send the generic message until the number of unconfirmed
!    outgoing messages is greater than the maxOutgoingUnconfirmedMessages configuration.
!    Upon receiving the generic message, the upstream component will send the generic
!    message acknowledgement back to the RTC to synchronize the internal
!    sequence number.
!
!    Default value: 10
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${route}".route*"${svc}"*maxCache : 50000
!#help
!    maxCache: { 0 - N items }
!
!    This parameter specifies the maximum number of items that can be
!    provided by the server.
!
!    Default value: 0
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${route}".route*"${svc}"*serverCost : 0
!#help
!    serverCost: { 0 - 3 }
!
!    This parameter allows to assign a cost value to a server.
!    This value is used by the sink for Asymmetrical Load Balancing.
!    Supported values are 0 through 3.
!
!    Default value: 0
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${route}".route*"${svc}"*appServiceName : ${svc}
!#help
!    appServiceName: <service>
!
!    The appServiceName parameter specifies the service name as published
!    by the upstream component at the host site.  For example, take the
!    following setting:
!
!    *rtc*hostrssl.route*CASCADE_SIAC*appServiceName : DF_SIAC
!
!    Here, CASCADE_SIAC will be the name advertised to all connected sink
!    applications. The name CASCADE_SIAC will need to be specified in the
!    serviceList and all service specific configuration will use the
!    CASCADE_SIAC name.
!
!    The name "DF_SIAC" is the name published by the upstream component. In
!    most cases,  this is the realname of the service whereas CASCADE_SIAC
!    is the alias. When using appServiceName, the real service name will not
!    be referenced in the config except as the value of the appServiceName
!    parameter setting.
!
!    Default value: <empty>
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${route}".route*"${svc}"*serverPartitionList :
!#help
!    serverPartitionList:
!
!    Specifies a comma delimited list of regular expressions that denote
!    the item names that this server supports. For example if this server
!    has a value of ^[A-M].* in its serverPartitionList. RTC will only
!    attempt to send a request to this server if the item name begins
!    with A through M.
!
!    The value of this parameter cannot be greater than 255 characters/bytes.
!
!    Note: This parameter is used only if the load is partitioned across
!          multiple servers based on item name.
!
!    Default value: none
!#endif
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${route}".route*"${svc}"*serverPartitionNegationList :
!#help
!    serverPartitionNegationList:
!
!    Specifies a comma delimited list of regular expressions that denote
!    the item names that this server does not support. For example if this
!    server has a value of ^[A-M].* in its serverPartitionNegationList. RTC
!    will only attempt to send a request to this server if the item name
!    does not begin with A through M.
!
!    The value of this parameter cannot be greater than 255 characters/bytes.
!
!    Note: This parameter is used only if the load is partitioned across
!          multiple servers based on item name.
!
!    Default value: none
!#endif
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${route}".route*"${svc}"*disconnectServiceDown : True
!#help
!    disconnectServiceDown: { True, False }
!
!    This parameter indicates whether the ADHs should delete the proxy and
!    all items if the service goes down. If True, the ADH will delete the service
!    proxy and all service items if the service goes down.
!    If False, the ADH will mark all service items stale. Recommended configuration
!    is that if multiple servers exist for this service on the network (load balanced),
!    set True so that the service will be deleted on the ADH causing all items
!    to failover to a healthy server. If only one server exists for this service
!    on the network, set False to provide stale data.
!
!    Default value: True
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${route}".route*"${svc}"*downloadCriteriaName :
!#help
!    downloadCriteriaName:
!
!    Specifies a Criteria (SSL) or Symbol List (RSSL) to preload the cache
!    list with when cacheType is set as 'sourceDriven'.
!
!    Default value: None
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${route}".route*"${svc}"*hashIDs :
!#help
!    hashIDs:
!
!    Specifies a comma delimited list of hash IDs (1 - 24) this server supports.
!
!    Default value: None
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${route}".route*"${svc}"*statusTextIntroducer :
!#help
!    statusTextIntroducer:
!
!    This parameter specifies the string that is prepended to the state text in
!    all refresh and status messages coming from the upstream provider application.
!    This can be useful to help determine what layer (local site or upstream) the
!    state text and status events are being generated from.
!
!    Default value: None
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${route}".route*"${svc}"*primaryProvider : True
!#help
!    primaryProvider: { True, False }
!
!    Parameter controls on per-server basis the primary versus secondary providers
!    when interactive source blending is enabled.
!
!    Default value: True
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${route}".route*enableOnInboundThreads : True
!#help
!    enableOnInboundThreads: { True, False }
!
!    When 'numItemThreads' is enabled, this parameter controls whether the route
!    should initiate connection to the upstream host and bring services up on the
!    main and across all item threads (True) or just on the main thread (False).
!
!    Administrators may want to set this parameter to False for example for routes
!    to upstream provider applications which do not support multiple connections
!    while still being able to support other routes which can take advantage of
!    multiple connections and item threads for example when cascading from an
!    upstream RTC.
!
!    NOTE: When creating multiple routes providing the same service (load balanced
!    servers) or for routes performing provider warm standby, the enableOnInboundThreads
!    parameter MUST be set to the same value across all routes.
!
!    Tunnel Stream Aggregation: For TSA enabled routes, TRCC can only support a
!    single connection and login per device, so this parameter MUST be set to False.
!
!    Default value: True
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*${route}.route*${svc}.enableTunnelStreamAggregation : False
!#help
!    enableTunnelStreamAggregation: { True, False }
!
!    This parameter specifies whether the service will enable tunnel stream aggregation
!    capability.
!
!    Default value: False
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*${route}.route*${svc}*tunnelStream*userName :
!#help
!    tunnelStream*userName :
!
!    This parameter refers to the AAA username to be used by the tunnel stream for login
!    authentication. This parameter takes effect only when enableTunnelStreamAggregation
!    is True.
!
!    Default value: none
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*${route}.route*${svc}*tunnelStream*userPassword :
!#help
!    tunnelStream*userPassword :
!
!    This parameter refers to the obfuscated password string to be used by the tunnel stream
!    for AAA login authentication. This is the output string from the obfuscation tool when
!    the password string is supplied to it in plain text. This parameter takes effect only
!    when enableTunnelStreamAggregation is True.
!
!    Default value: none
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*${route}.route*${svc}*tunnelStream*numIpcOutputBuffers : 400
!#help
!    tunnelStream*numIpcOutputBuffers :
!
!    This parameter specifies the number of guarnateed output buffers available to the
!    tunnel stream. This parameter takes effect only when enableTunnelStreamAggregation
!    is True.
!
!    Default value: 400
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*serviceDiscoveryUrl : https://api.refinitiv.com/streaming/pricing/v1/
!#help
!
!    serviceDiscoveryUrl:
!
!    URL for RDP endpoint service discovery for connectivity into Refinitiv Real-Time Optimized.
!
!    Default value: https://api.refinitiv.com/streaming/pricing/v1/
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*oAuthPasswordGrant*tokenServiceUrl : https://api.refinitiv.com/auth/oauth2/v1/token
!#help
!
!    tokenServiceUrl:
!
!    URL for RDP token management required for connectivity and authentication into
!    Refinitiv Real-Time Optimized using oAuthPasswordGrant.
!
!    Default value: https://api.refinitiv.com/auth/oauth2/v1/token
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*oAuthClientCred*tokenServiceUrl : https://api.refinitiv.com/auth/oauth2/v2/token
!#help
!
!    tokenServiceUrl:
!
!    URL for RDP token management required for connectivity and authentication into
!    Refinitiv Real-Time Optimized using oAuthClientCred.
!
!    Default value: https://api.refinitiv.com/auth/oauth2/v2/token
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*tokenReissueRatio : 0.80
!#help
!
!    tokenReissueRatio: { 0.05 - 0.95 }
!
!    Specifies a ratio to multiply with access token validity time (seconds) for
!    retrieving and reissuing the access token. The valid range is between 0.05
!    to 0.95.
!
!    Default value: 0.80
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*routeList : hostssl, hostrssl
!#help
!    routeList: [<routeName1>], [<routeName2>], ...
!
!    A comma-separated list of this components' source routes.
!    Each route defines a connection to a RTC.  The route names
!    are simply labels used to identify the routes for configuration
!    purposes.  Each route needs to be further configured for its
!    hostList, port and serviceList.
!
!    Default value: <empty> (empty means no routes will be created.)
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*${svc}*dataType : 6
!#help
!    dataType: <type>
!
!    Indicates the format of the data provided by the service.
!        1 - standard ANSI Page format
!        2 - standard Marketfeed Record format
!        6 - RWF (Refinitiv Wire Format)
!
!    Default value: 6
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*aggregateServiceList :
!#help
!    aggregateServiceList: [<ServiceName1>], [<ServiceName2>] ...
!
!    This parameter is a comma-separated list of service names as published
!    by the Source Distributor. Each defined service will aggregate multiple
!    publisher application services into a single server within the aggregate
!    service.
!
!    Default value: none
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${svc}"*nonInteractiveSourceList : ${svc}
!#help
!    nonInteractiveSourceList: [<AppServiceName1>], [<AppServiceName2>] ...
!
!    (Applies to aggregate services only)
!
!    This parameter is the comma-separated list of application service names
!    as to be aggregated into the service. Must be defined for each service
!    in the aggregateServiceList.
!
!    Default value: <same as aggregate service name>
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *adh*"${svc}"*autoExpiryItemBaseline : update
!#help
!    autoExpiryItemBaseline : { creation, update }
!
!    AutoExpiry automatically closes an item and removes it from cache after a certain
!    configurable time.  This parameter specifies the time from which an item's age is
!    calculated -- either the item's creation time, or the time of its last update.
!
!    AutoExpiry is applicable only if 'cacheType' is 'sourceDriven'.
!
!    Default value: update
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *adh*"${svc}"*autoExpiryItemTimeUnits : days
!#help
!    autoExpiryItemTimeUnits : { seconds, minutes, hours, days }
!
!    AutoExpiry automatically closes an item and removes it from cache after a certain
!    configurable time.  This parameter specifies the units in which the timeout is
!    measured.  The parameter 'autoExpiryItemTimeout' is measured in these units.
!
!    AutoExpiry is applicable only if 'cacheType' is 'sourceDriven'.
!
!
!    Default value: days
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *adh*"${svc}"*autoExpiryItemTimeout : 0
!#help
!
!    autoExpiryItemTimeout : { 0 - N }
!
!    AutoExpiry automatically closes an item and removes it from cache after a certain
!    configurable time.  This parameter specifies the age at which the item is closed.
!    When this is set to 0, autoExpiry based on item age is disabled.  The timeout
!    interval is measured in units specified in 'autoExpiryItemTimeUnits'.
!
!    AutoExpiry is applicable only if 'cacheType' is 'sourceDriven'.
!
!
!    Default value: 0
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *adh*"${svc}"*autoExpiryMaxListSize : 0
!#help
!
!    autoExpiryMaxListSize : { 0 - N }
!
!    AutoExpiry can automatically close the oldest items when the number of
!    cached items exceeds a certain limit. This parameter specifies that
!    limit.  The item age can be measured based on time since last update
!    or time since creation, depending on how the parameter
!    'autoExpiryItemBaseline' is set.
!
!    AutoExpiry is applicable only if 'cacheType' is 'sourceDriven'.
!
!
!    Default value: 0
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *adh*"${svc}"*autoExpiryItemLog : False
!#help
!
!    autoExpiryItemLog : { True, False }
!
!    When 'autoExpiryItemLog' is enabled, the action of closing and removing
!    expired items will be logged in normal operational logging.
!
!    AutoExpiry is applicable only if 'cacheType' is 'sourceDriven'.
!
!
!    Default value: False
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${svc}"*insertAction : lowest
!#help
!    insertAction: { lowest, any, allAll, allAny, single }
!
!    Defines how the RTC will handle an Insert request for multiple servers.
!    One of the following actions may be specified:
!
!     lowest - Send the Insert to the server having the lowest load level. If
!              multiple servers have an equally low load level, the Insert will
!              be sent to the server within this subset which was started up
!              first.
!     any    - Send the Insert to any single server. Servers will be selected to
!              receive Inserts in a round-robin fashion; load level will be
!              ignored.
!     allAll - Send the Insert to ALL source servers. An Insert acknowledgement
!              (ACK) will be sent to the sink application only if ALL servers
!              ACK the Insert. Otherwise, a negative acknowledgement (NAK) will
!              be sent to the sink application.
!     allAny - Send the Insert to ALL source servers. An Insert acknowledgement
!              (ACK) will be sent to the sink application if ANY server ACK's
!              the Insert. Otherwise, a negative acknowledgement (NAK) will be
!              sent to the sink application.
!     single - Always send the Insert to the same single server. Servers will be
!              selected to receive Inserts in a random fashion;
!              load level will be ignored. When the server is no more
!              available the new one will be selected.
!
!    Default value: lowest
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${svc}"*insertTimeout : 30
!#help
!    insertTimeout: { 1 - N seconds }
!
!    This parameter defines the time interval (in seconds) that the
!    RTC will wait for an ACK or NAK to an Insert request before timing-
!    out the request. The default value is 30 seconds. An Insert NAK message
!    indicating no response is generated if the Insert request times out.
!
!    Default value: 30
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*cacheServiceList :
!#help
!    cacheServiceList: [<ServiceName1>], [<ServiceName2>] ...
!
!    This parameter is a comma-separated list of service names as published
!    by the RTC. Each defined service will be created on startup of the RTC
!    to provide a non-interactive cache for insert and OMM post message content.
!
!    These services can be used in conjunction with the aggregateServiceList
!    parameter to provide RSSL publisher applications the ability to provide
!    additional content to the same server cache.
!
!    Default value: none
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${svc}"*capabilityList : 6, 7, 8, 9, 10
!#help
!    capabilityList: <comma-separated list> { 5 - 255 }
!
!    This parameter is a comma-separated list of supported capabilities (domains) for:
!
!    - non-interactive insert and OMM post services created via cacheServiceList
!    - services which have overrideProviderCapabilities is set to True
!
!    Default value: 6, 7, 8, 9, 10
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${svc}"*enforceSourceDrivenMaxCache : False
!#help
!    enforceSourceDrivenMaxCache: { True, False }
!
!    This parameter instructs the ADH whether to limit the number of items
!    in the cache list, according to the maxCache setting.
!
!    This parameter is applicable only if 'cacheType' is set to 'sourceDriven'.
!
!    If new item image coming from the sourceDriven source application exceeds
!    the maxCache limit, the image will be discarded.
!
!    Default value: False
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${svc}"*buildCacheFromUpdates : False
!#help
!    buildCacheFromUpdates: { True, False }
!
!    This parameter instructs the RTC whether to create items in cache based
!    on updates for Level 1 (MarketPrice) items.
!
!    When set to False (default), the RTC will only create items in cache
!    on unsolicited refreshes. Updates for items not found in cache will be
!    ignored.
!
!    When set to True, the RTC will create items in cache on unsolicited
!    refreshes or updates. Cache template sharing will be disabled.
!
!    Default value: False
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *fieldDictionary :
!#help
!   fieldDictionary:
!
!   The field dictionary is a table giving the FID, type, length, RWF type,
!   RWF length and description of each Marketfeed / RWF field. This parameter
!   specifies the name of the field dictionary file and the directory where
!   it is located.
!
!   Default value: ../../etc/RDMFieldDictionary
!
!   Note: The latest field dictionary file RDMFieldDictionary is provided in the
!         software package. The default value of 'fieldDictionary' has been
!         pre-defined to the relative path of this file.
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *enumFile :
!#help
!   enumFile:
!
!   The Marketfeed protocol supports enumerated types. Fields of this type
!   contain integer data which can be expanded to configured strings. This
!   mapping is defined by the "enumtype file". This parameter specifies the
!   name of this file and the directory where it is located.
!
!   Default value: ../../etc/enumtype.def
!
!   Note: The latest IDN Enumtype file enumtype.def is provided in the
!         software package. The default value of 'enumFile' has been
!         pre-defined to the relative path of this file.
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*enableMultipartDictionary : False
!#help
!   enableMultipartDictionary: { True, False }
!
!   This feature provides efficient download of large RWFFld and RWFEnum dictionaries and provides
!   flow control based on channel buffer utilization for RSSL consumers and providers. Enabling this
!   feature will break apart and download the dictionaries as multiple part refresh messages (multiple
!   payloads) versus a single large refresh message (single payload). To prevent channel disconnects
!   due to buffer overflow on dictionary download, when channel buffer utilization reaches output
!   threshold breach, dictionary download will slow, and will resume when channel buffer utilization
!   reaches output threshold ok.
!
!   Note: Before enabling, administrators must confirm that all RSSL consumer and provider applications
!   support multiple part dictionary responses, such as EMA, or if using ETA, confirm that multiple part
!   dictionary handling has been implemented.
!
!   Default value: False
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
! [License]
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*licenseFile : ../../etc/REFINITIV_LICENSE
!#help
!   licenseFile:
!
!   This parameter specifies a path and a name of license file. Licenses
!   contained in the file are validated with the software components and
!   configured features if they are licensed for uses. Licensable features
!   are enabled only if licenses obtained from the license file are valid
!   and otherwise disabled if no valid licenses found.
!
!   Please contact your representatives or your administrator for requesting
!   the license.
!
!   Default value: ../../etc/REFINITIV_LICENSE
!
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*licenseValidatingTime :
!#help
!   licenseValidatingTime: HH:MM (24 hours format)
!
!   This parameter specifies time when the component will regularly validate
!   the license. The default value is the time at start up.
!
!   Default value:
!
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
! [Source Service]
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*domainsCached :
!#help
! domainsCached: Defines a list of domains for which caching is enabled.
!
! If domainsCached variable has entries, then any domain not in the list
! will not be cached.
!
! For example, to cache only level 1 data:
!      *rtc*domainsCached: MARKET_PRICE
!
! If the variable domainsCached have entries then it takes precedence in
! the processing and the variable domainsNotCached is ignored.
!
! To enable caching for all domains:
!      *rtc*domainsCached: ALL
!
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*domainsNotCached :
!#help
! domainsNotCached: Defines a list of domains for which caching is disabled.
!
! If domainsNotCached variable has entries, then any domain other than the
! entries in the list will be cached.
!
! For example, to disable caching for level 2 data:
!     *rtc*domainsNotCached: MARKET_MAKER, MARKET_BY_ORDER, MARKET_BY_PRICE
!
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${svc}"*qosTimeliness : REALTIME
! *rtc*"${svc}"*qosTimeInfo : 0
! *rtc*"${svc}"*qosRate : TICK_BY_TICK
! *rtc*"${svc}"*qosRateInfo : 0
!#help
!    qosTimeliness: { REALTIME, DELAYED, DELAYED_UNKNOWN }
!    qosTimeInfo: { 1 - n seconds for delayed }
!    qosRate: { TICK_BY_TICK, JIT_CONFLATED, TIME_CONFLATED }
!    qosRateInfo: { 1 - n milliseconds for time conflation }
!
!    Quality of Service
!
!    These parameters are only applicable for services sourced over an SSL
!    route. For services sourced over an RSSL route, the RTC POP will always
!    use the QoS advertised in the upstream source directory.
!
!    These parameters define the static QoS for the service that will be
!    advertised to downstream RSSL client applications within the source
!    directory.
!
!    Default value: REALTIME/TICK_BY_TICK
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${svc}"*overrideProviderQos : False
!
!#help
!    overrideProviderQos: { True, False }
!
!    Override Provider Quality of Service
!
!    Applicable only for RSSL source applications.
!
!    For RTC, this parameter will be read for services sourced over an RSSL route.
!    For services sourced over an SSL route, it is not necessary to set this
!    parameter as the RTC will always read QoS information from the config file.
!
!    When True, this parameter will override the QoS information received
!    from the source with the information read from configuration file. The
!    following parameters should be configured when overrideProviderQos is True:
!    qosTimeliness, qosTimeInfo, qosRate, and qosRateInfo.
!
!    NOTE: When conflation or delay is enabled within the RTC, this parameter
!    has no affect as the RTC will always advertise the conflated or delayed
!    QoS information downstream.
!
!    Default value: False
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${svc}"*overrideFeatureQos : False
!
!#help
!    overrideFeatureQos: { True, False }
!
!    Override Feature Quality of Service
!
!    When conflation or delay is enabled within the RTC, the conflated or
!    delayed QoS information is always advertised downstream. When True,
!    this parameter will override the feature QoS with the QoS information
!    from the source application or read from configuration.
!
!    Default value: False
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${svc}"*overrideProviderCapabilities : False
!
!#help
!    overrideProviderCapabilities: { True, False }
!
!    Override Provider Capabilities
!
!    Applicable only for RSSL source applications.
!
!    For RTC, this parameter will be read for services provided over RSSL. For
!    services provided over SSL, it is not necessary to set this parameter as the
!    RTC will always read the capability list from the configuration file.
!
!    When True, this parameter will only forward capabilities which are contained in
!    both the list of capabilities from the source and the list of capabilities read
!    from the capabilityList configuration parameter.
!
!    Default value: False
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *"${svc}"*blockedItemsFile :
!#help
!    blockedItemsFile:
!
!    This is an optional parameter.
!    If this parameter is defined, it must specify the path name (full or
!    relative) of a 'blocked items' file. This file must contain one item name
!    per line. Regular expressions are allowed; see installation manual.
!    All users on the system will be unable to open any item specified
!    in this file. If this parameter is not defined, normal open processing
!    will be performed.
!
!    Default value: none
!
!    Note: It is recommended that this file name incorporate the service name
!          so as to avoid accidentally sharing the same file name used by
!          another service.
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *"${svc}"*itemPriorityFile :
!#help
!    itemPriorityFile:
!
!    This is an optional parameter.
!    If this parameter is defined, it must specify the path name (full or
!    relative) of an 'item priority' file. This file must contain one item entry
!    per line having the following format:
!        item_name  priority_class
!    where the item_name and priority_class are separated by a blank space.
!    With respect to a user request:
!    1) If the requested item is specified in the 'itemPriorityFile', the
!       Sink Open priority class will be set to the priority class assigned to
!       this item by this file.
!    2) If the requested item is NOT specified in the 'itemPriorityFile':
!       a) If the user request contains the default priority (class 1, count 1)
!          and a 'defaultPriorityClass' is defined for this user/service
!          combination (this parameter is specified in the ssluser.cpd
!          file), the Sink Open priority class will be set to the
!          'defaultPriorityClass' value.
!       b) Otherwise, the Sink Open priority class will be set to the priority
!          class provided in the user request with the following exceptions:
!          i)  If a 'maxPriorityClass' is defined for this user/service
!              combination (this parameter is specified in the ssluser.cpd
!              and the priority class provided in the user request exceeds
!              this value, the Sink Open priority class will be set to the
!              'maxPriorityClass' value.
!          ii) If a 'maxPriorityClass' is NOT defined for the given user/service
!              combination and the priority class provided in the user request
!              is equal to or greater than the 'lockedItemThreshold' for the
!              service, the Sink Open priority class will be set to the value
!              (lockedItemThreshold - 1).
!
!    Default value: none
!
!    Note: If defined, the 'defaultPriorityClass' and 'maxPriorityClass'
!          parameters must be set to a value less than the 'lockedItemThreshold'
!          defined for the service.
!          If defined, it is recommended that the 'itemPriorityFile' name
!          incorporate the service name so as to avoid accidentally sharing the
!          same file name used by another service.
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${svc}"*preloadPace : 100
!#help
!    preloadPace: { 1 - N }
!
!    This value defines the number of preload open requests to be issued per
!    second. This value can be decreased or increased based upon Infrastructure
!    performance and desired preload processing time.
!
!    Default value: 100
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${svc}"*initialPreloadFile :
!#help
!    initialPreloadFile:
!
!    If this optional parameter is defined, it must specify the path name
!    (full or relative) of the initial preload file. This file must contain
!    one RIC name per line. When the service becomes available, the RTC
!    will pre-populate the cache with the items contained in this file.
!    If not defined, no items will be preloaded on service initialization.
!
!    Default value: none
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${svc}"*dynamicPreloadFile :
!#help
!    dynamicPreloadFile:
!
!    If this optional parameter is defined, it must specify the path name
!    (full or relative) of the dynamic item preload file. This file must
!    contain one RIC name per line. After the service becomes available,
!    administrators can process the dynamic preload file by setting the
!    processDynamicPreload flag in rtcmon. When the flag is set, the RTC
!    will populate the cache with the items contained in this file. Dyanmic
!    preload requests will be dropped if a preload (initial or dynamic) is
!    currently in progress. If not defined, no items will be preloaded on
!    dynamic preload requests.
!
!    Default value: none
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${svc}"*preloadList :
!#help
!    preloadList:
!
!    If this option is specified, then a symbol list request will be done
!    for each symbol list name listed when the service becomes available.
!    If the symbol list is redirected to criteria, a criteria stream is
!    opened. The RTC will pre-populate its cache with the items contained
!    in the item list supplied from the symbol list or criteria request.
!
!    Note: Items will not be preloaded if they are in the blockedItemsFile.
!
!    Default value: none
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${svc}"*convertSnapToNormal : False
!#help
!    convertSnapToNormal: { True, False }
!
!    This parameter, used together with ageUnwatchedItemTime, builds the RTC
!    cache with past snapshot requests in order to improve performance for
!    applications that frequently snap a set of items. When set to True, the
!    RTC will convert snapshot requests into normal requests to upstream data
!    sources. Client applications still receive a snapshot response. The item
!    will stay in cache for a time period controlled by ageUnwatchedItemTime.
!    If removeUnwatchedItems is True and ageUnwatchedItemTime is set to 0,
!    this parameter should be left at False.
!
!    Note: The convertSnapToNormal will always be True when delay is enabled
!          for the service since it is desirable to keep unwatched items in
!          cache for a longer period in order to avoid the delay associated
!          with opening an uncached item. The unwatched items will be removed
!          from cache by ageUnwatchedItemTime.
!
!    Default value: False
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${svc}"*updateAggregation : False
!#help
!    updateAggregation: { True, False}
!
!    This parameter specifies whether the service will aggregate updates
!    at the specified time interval.
!
!    Note: Caching MUST BE ENABLED in the FD in order to work properly.
!
!    Default value: True
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${svc}"*aggregationStyle: TMF
!#help
!    aggregationStyle:  { TMF, CLASSIC }
!
!    This parameter specifies the aggregation style used in managing the
!    incoming updates when update aggregation feature is enabled. Either a
!    numeric value or a string may be specified from the following list:
!
!    1 or TMF     - TIC Message Filter (TMF) algorithm
!                   The TMF algorithm aggregates the first update along with
!                   other updates received during the aggregation interval.
!
!    2 or CLASSIC - Classic algorithm
!                   The CLASSIC algorithm immediately sends the first update
!                   received and then aggregates additional updates received
!                   during the aggregation interval.
!
!    Note:
!      - This parameter is valid only when updateAggregation is set to True.
!
!  Default value: TMF
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${svc}"*aggregationDomains : MARKET_PRICE
!#help
!    aggregationDomains:
!
!    A comma-separated list of domains (numeric for shorthand) to be aggregated
!    for this service. Any domain not in the list will not be aggregated. Only
!    domains which contain Field List or Map of Field Lists are supported.
!
!        MARKET_PRICE (6)    : Quotes and Trades
!        MARKET_BY_ORDER (7) : Market by Order/Order Book Message
!        MARKET_BY_PRICE (8) : Market by Price/Market Depth Message
!        MARKET_MAKER (9)    : Market Maker Message
!
!    For custom (non-RDM) domains which contain Field List or Map of Field Lists
!    and should be conflated, the domains can be added to the list via numeric
!    value.
!
!    Default value: MARKET_PRICE
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${svc}"*aggregationInterval : 1000
!#help
!    aggregationInterval: { 100 - 65530 }
!
!    A comma-separated list of aggregationInterval for this service. Each value
!    specifies the time interval in milliseconds at which updates will be sent.
!
!    This parameter is only valid if 'updateAggregation' is set to 'True'.
!
!    If more than one value are configured and multipleQosServiceList is set,
!    multi-level update aggregation will be enabled. Otherwise, single level
!    update aggregation is enabled.
!
!    For the single level update aggregation, the value specified in this
!    parameter should be in the specific range { 100 - 65530 }.
!
!    For the multi-level update aggregation, the values specified in this
!    parameter should be in the specific range { 100 - 65530 }. Each value is
!    assigned to an aggregation service or server. A number of configured values
!    indicate a number of aggregation service or server being generated.
!
!    Default value: 1000
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${svc}"*maxUpdateNum: 5000
!#help
!
!    maxUpdateNum:
!
!    RTC sends conflated updates to clients when the aggregationInterval timer fires.
!    However, if the number of the updates that are sent in a 50 ms interval
!    are more than maxUpdateNum, RTC initiates a pacing mechanism.
!    The pacing mechanism is that maxUpdateNum updates are sent every 10 ms
!    until the all updates are sent. It is suggested to increase the value
!    of maxUpdateNum if conflated updates are being paced too frequently.
!
!    The parameter should be in the specific range {1000 - 10000}.
!
!    Note:
!      - This parameter is valid only when updateAggregation is set to True.
!
!    Default value: 5000
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${svc}"*aggregationLogMsgInterval: 7200
!#help
!
!    aggregationLogMsgInterval: { 120 - 2147483647 }
!
!    This parameter specifies the time interval in seconds to log a message.
!    The message will include how many times that pacing mechanism is enabled
!    because updates are arriving to the component too quickly.
!
!    Note:
!      - This parameter is valid only when updateAggregation is set to True.
!
!    Default value: 7200 (2 hours)
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
!*rtc*"${svc}"*enableProviderWarmStandby : False
!#help
!    enableProviderWarmStandby: { True, False }
!
!    Parameter enables the warm standby feature across upstream provider
!    applications. Every upstream provider application must support warm
!    standby and in the case of an upstream RTC, the RTC must have the
!    'supportWarmStandby' parameter set to True.
!
!    Default value: False
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
!*rtc*"${svc}"*warmStandbyRoutes :
!#help
!    warmStandbyRoutes: route1 route2 .. [; route3 route4 .. [;..] ]
!
!    Defines the routes (space-separated) which should be used for warm standby.
!    Multiple load balanced primary servers can be created using semi-colon
!    separated lists of routes.
!
!    For example, to create 2 primary servers, each with 3 routes for warm standby:
!
!    *rtc*ELEKTRON_DD*warmStandbyRoutes : route1 route2 route3; route4 route5 route6
!
!    When the parameter contains route names, for routes not listed or for routes
!    which are defined but no other routes are defined in its set, they will be
!    standalone load balanced servers.
!
!    Default is empty which will use all routes for warm standby to create a
!    single primary server.
!
!    Default value: (empty - all routes)
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*${svc}*warmStandbyFailoverNotification : False
!#help
!    warmStandbyFailoverNotification: { True, False }
!
!    Parameter controls whether to generate group info event notification
!    on failover to a new active server.
!
!    Default value: False
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*${svc}*warmStandbyLogOpenFailures : False
!#help
!    warmStandbyLogOpenFailures: { True, False }
!
!    Parameter controls whether to log open and outage failures for standby
!    items.
!
!    Default value: False
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*${svc}*warmStandbyRetryTime : 120
!#help
!    warmStandbyRetryTime: { 1 - n seconds }
!
!    Parameter controls amount of time in seconds an item will be attempted to
!    be recovered from the standby retry queue due to standby open failures.
!    items.
!
!    Default value: 120
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*${svc}*warmStandbyRetryLimit : 3
!#help
!    warmStandbyRetryLimit: { -1, 0 - n times }
!
!    Parameter controls number of times an item will be attempted to be recovered
!    from the standby retry queue (-1: unlimited). Once the limit is reached, the
!    item will not longer be attempted to be recovered and will remain as recall.
!
!    Default value: 3
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
!*rtc*"${svc}"*standbyForwardInsertToSrcApp : True
!#help
!    standbyForwardInsertToSrcApp: { True, False }
!
!    This parameter indicates whether standby servers will process insert
!    and post messages. If False, insert and post messages will not be
!    forwarded to the upstream RTC on standby servers.
!
!    Default value: True
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
!*rtc*"${svc}"*enableWarmStandbyPreferredRoute : False
!#help
!    enableWarmStandbyPreferredRoute : { True, False }
!
!    Specifies whether this service has warm standby preferred route enabled.
!    If set to false, the first route in the primary server that comes up
!    will be the active route.
!
!    Default value: False
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
!*rtc*"${svc}"*ELEKTRON_DD*warmStandbyPreferredRouteList :
!#help
!    warmStandbyPreferredRouteList : [<routeName1>], [<routeName3>], ...
!
!    Specifies a comma-separated list of the warm standby preferred active routes.
!    Only a single warm standby preferred route is supported per primary server.
!
!    If the warmStandbyPreferredRouteList parameter is configured,
!    the order of the routes in warmStandbyRoutes parameter will not matter.
!
!    Default is empty which will rely on the order of the routes specified
!    in the warmStandbyRoutes parameter.
!    The first route in each primary server of the warmStandbyRoutes parameter
!    will be designated as the preferred active server.
!
!    Default value: <empty>
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
!*rtc*"${svc}"*warmStandbyPreferredRouteDetectionTimeFormat :
!#help
!    warmStandbyPreferredRouteDetectionTimeFormat : crontab(5)
!
!    Set a specific day and time when the warm standby preferred route switchover may be performed.
!    If the value is empty, the switchover thresholds will be checked periodically based on the value of
!    the warmStandbyPreferredRouteDetectionTimeInterval configuration parameter instead.
!
!    Refer to the Linux 'man 5 crontab' page for formatting information (time and date fields).
!
!    For example, "12:01 am on the 1st of the month":
!
!    *rtc*ELEKTRON_DD*warmStandbyPreferredRouteDetectionTimeFormat : 1 0 1 * *
!
!    Default value: empty
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
!*rtc*"${svc}"*warmStandbyPreferredRouteDetectionTimeInterval : 6
!#help
!    warmStandbyPreferredRouteDetectionTimeInterval : { 1 - N }
!
!    Specifies the interval (in seconds) between attempts to initiate
!    a warm standby preferred route switchover and start the switchover countdown.
!    The switchover countdown begins only if the preferred active server is
!    currently the standby server and the switchover thresholds are met.
!
!    The value of the configuration parameter also determines how long the primary server will wait for
!    the preferred route to come up initially before choosing a non-preferred server as active.
!
!    Default value: 6
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
!*rtc*"${svc}"*decisionTimeWarmStandbyPreferredRouteSwitchover : 60
!#help
!    decisionTimeWarmStandbyPreferredRouteSwitchover : { 0 - 65535 }
!
!    Sets the duration of the switchover countdown in seconds.
!
!    If a non-preferred active server determines that the preferred active server
!    meets the switchover thresholds, the countdown begins.
!
!    If the preferred server remains within these thresholds in the decision time window,
!    the non-preferred switches over to the preferred once the countdown ends.
!
!    During the countdown, thresholds are periodically reverified every second.
!    If conditions change and thresholds are no longer within range,
!    the countdown is canceled and the non-preferred server remains active.
!
!    Default value: 60
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
!*rtc*"${svc}"*minItemsRecoveredUponWarmStandbySwitchover : 0
!#help
!    minItemsRecoveredUponWarmStandbySwitchover : { 0 - 100 }
!
!    Specifies the minimum percentage of items recovered relative to
!    the total number of items in the cachelist of the current non-preferred active server.
!    The non-preferred active server initiates a switchover if the preferred active server
!    is able to recover at least minItemsRecoveredUponWarmStandbySwitchover stale items without
!    interrupting more than maxItemsInterruptedUponWarmStandbySwitchover items after the switchover.
!
!    This switchover threshold is checked periodically during the switchover countdown.
!
!    The default value of 0 means the threshold is always met, even though the preferred active server
!    will not be able to recover any stale item upon switchover.
!
!    Default value: 0
!
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
!*rtc*"${svc}"*maxItemsInterruptedUponWarmStandbySwitchover : 100
!#help
!    maxItemsInterruptedUponWarmStandbySwitchover : { 0 - 100 }
!
!    Specifies the maximum percentage of items interrupted relative to
!    the total number of items in the cachelist of the current non-preferred active server.
!    The non-preferred active server initiates a switchover if the preferred active server
!    is able to recover at least minItemsRecoveredUponWarmStandbySwitchover stale items without
!    interrupting more than maxItemsInterruptedUponWarmStandbySwitchover items after the switchover.
!
!    Active stale items and items in the recall queue count towards interruption upon switchover.
!
!    This switchover threshold is checked periodically during the switchover countdown.
!
!    The default value of 100 means the threshold is always met, even though all items
!    in the preferred active server are stale and/or in the recall queue.
!
!    Default value: 100
!
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
!   *rtc*"${svc}"*overrideClearCache : False
!#help
!
!   overrideClearCache: { True, False }
!
!   This parameter specifies whether to override the CLEAR_CACHE
!   flag in RWF refresh messages for the service.
!
!   Default value: False
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
!   *rtc*"${svc}"*overrideDoNotConflate : False
!#help
!
!   overrideDoNotConflate: { True, False }
!
!   This parameter specifies whether to override the DO_NOT_CONFLATE
!   flag in RWF update messages for the service. This parameter can
!   only be set on the concrete service and applies to all virtual
!   services.
!
!   Default value: False
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${svc}"*nakListMaxItems : 0
!#help
!    nakListMaxItems: { 0 disabled, 1 - N items }
!
!    This parameter specifies the maximum number of items that can be
!    placed on Nak Item List for a service.
!
!    Note: This parameter is recommended to only be enabled if a single server
!        or single hot standby pair supports the item (single partition) and
!        is applicable only for sinkDriven services.
!
!    Default value: 0 (disabled)
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${svc}"*nakListAgeOutTime : 345600
!#help
!    nakListAgeOutTime: { 1 - N seconds}
!
!    This parameter specifies the time in seconds before an item would
!    be aged out from Nak Item List.
!
!    Default value: 345600 (4 days)
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${svc}"*serviceDumpFile :
!#help
!    serviceDumpFile: { path and file name }
!
!    Specifies the location and name for dump file of this service.
!    This parameter is used when "dump" variable in rtcmon
!    (Service Statistics -> Attributes) is changed to "True".
!
!    Default value: ./<serviceName>_rtc.dump
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"{svc}"*serviceTemplateDumpFile :
!#help
!    serviceTemplateDumpFile: { path and file name }
!
!    Specifies the location and name for dump file of this service.
!    This parameter is used when "dumpTemplateDatabase" variable in
!    rtcmon (Service Statistics -> Attributes) is changed to "True".
!
!    Default value: ./<serviceName>_rtc_template.dump
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
!*rtc*"${svc}"*multipleQosServiceList :
!#help
!
!    multipleQosServiceList: [<virtualServiceName1>:<serviceFeature>[:<aggregationInterval>]], ...
!
!    This parameter is a comma separated list of virtual service names and
!    service features using for creating multiple virtual services with different
!    service name and QoS and advertising to the downstream components.
!
!    The configuration of each virtual service is as below.
!    <virtual service name>:<service features>[:<aggregation interval>]
!
!    Where:
!    - virtual service name is the service name of a virtual service which
!      is published on the downstream network by the component.
!
!    - service feature is the feature for defining the QoS of the virtual
!      service. There are three valid features which are CONFLATE, DELAY,
!      and DELAY_CONFLATE.
!
!    - aggregation interval is the interval time for the CONFLATE and
!      DELAY_CONFLATE virtual services. This aggregation interval value
!      must be configured in the aggregationInterval parameter.
!
!    Examples:
!    IDN_RDF_DELAY:DELAY
!    IDN_RDF_CONFLATE:CONFLATE:1000
!    IDN_RDF_DELAY_CONFLATE:DELAY_CONFLATE:1000
!
!    Note:
!    - The multiple QoS feature can be also used to create virtual services
!      having multiple rates of aggregation intervals which can be used
!      instead of the multi-level aggregations feature in the component.
!
!    - The original service name (as defined in the serviceList parameter
!      under the route configuration) is reserved and should not be
!      configured in the multipleQosServiceList parameter as it will be
!      ignored. If the original service is required, please enable the
!      multipleQosEnableOriginalService parameter.
!
!    - The virtual service cannot be started if the original service is not
!      enabled features as specified for the virtual service.
!
!    Default value: none
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
!    *rtc*"${svc}"*multipleQosEnableOriginalService : False
!#help
!
!    multipleQosEnableOriginalService: { True, False }
!
!    This parameter controls whether the component provides the original service from
!    the upstream along with the virtual services in the multipleQosServiceList
!    parameter. The original service always advertises the original QoS.
!
!    This parameter is applicable when the multipleQosServiceList is not empty.
!
!    Default value: False
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
!    *rtc*"${svc}"*multipleQosOverrideLockServiceId : False
!#help
!
!    multipleQosOverrideLockServiceId: { True, False }
!
!    This parameter indicates whether the component should replace the service ID
!    within the DACS access lock with the remapped service ID of the multiple
!    QoS virtual service, if they are different and the lock is not compounded.
!
!    This parameter should be disabled for publisher applications, such as the
!    DTS/ATS, which their permissions are performed against the original service.
!
!    Default value: False
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
!    *rtc*"${svc}"*multipleQosTrace : False
!#help
!
!    multipleQosTrace: { True, False }
!
!    This parameter specifies whether the component generates the multiple QoS tracing
!    information.
!
!    Default value: False
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
!    *rtc*"${svc}"*"${inst}".multipleQos*remappedServiceId :
!#help
!
!    <virtualServiceName>.multipleQos*remappedServiceId : {256 - 65535}
!
!   This parameter specifies a service ID of a virtual service in the
!    multipleQosServiceList parameter. Each service (including the
!    virtual service) must have a unique Id.
!
!    Default value: NONE
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
!    *rtc*"${route}".route*"${svc}"*"${inst}".multipleQos*remappedServerId :
!#help
!
!    <virtualServiceName>.multipleQos*remappedServerId : {255 - 65535}
!
!    This parameter specifies a server ID of a virtual service in the
!    multipleQosServiceList parameter. Each server (including the
!    virtual server) must have a unique Id.
!
!    Default value: NONE
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${svc}"*aggregationFields : 259
!#help
!    aggregationFields : 259
!
!    This parameter specifies which FIDs which will be used to enable
!    and/or disable update aggregation for certain instruments.
!    This is a comma separated list.
!    It can be specified by any of these:
!    - FID number (e.g., 259)
!    - FID ACRONYM (e.g., "RECORDTYPE")
!    - FID DDE ACRONYM (e.g., "DISPLAYTEMPLATE")
!
!    Default value: 259
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${svc}"*disableAggregationItemList : N2_UBMS, NFCP_UBMS
!#help
!    disableAggregationItemList : N2_UBMS, NFCP_UBMS
!
!    This parameter is a comma separated list which specifies
!    the item names for which to disable update aggregation.
!
!    Default value: N2_UBMS, NFCP_UBMS
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${svc}"*aggregationIntervalField : 4
!#help
!    aggregationIntervalField : 4
!
!    This parameter selects a FID whose value determines whether
!    a different aggregation interval is to be used. You can specify it
!    by any one of:
!     - FID number (e.g., 4)
!     - FID ACRONYM (e.g., "RDN_EXCHID")
!     - FID DDE ACRONYM (e.g., "IDN EXCHANGE ID")
!
!    Default value: 4
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${svc}"*aggregationIntervalFieldValues :
!#help
!    aggregationIntervalFieldValues :
!
!    This parameter defines the list of values of the *aggregationIntervalField
!    FID for which individual aggregation intervals will be defined. The list
!    is comprised of numeric values.
!    These values can be used to scope the *aggregationInterval parameter.
!
!    Default value: NONE
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${svc}"*"${inst}".fid*positiveAggregation :
!#help
!    *<valueFromAggregationFields>.fid*positiveAggregation :
!
!    This parameter is a comma separated list which specifies
!    the values for the *aggregationFields FID for which
!    update aggregation will be enabled.
!
!    Note: ${inst} is a FID configured in aggregationFields.
!
!    Default value: NONE
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${svc}"*"${inst}".fid*negativeAggregation :
!#help
!    *<valueFromAggregationFields>.fid*negativeAggregation : 21, 24, 29, 37, 40, 45, 53, 56, 61, 69, 72, 77, 85, 88, 93, 101, 104, 109, 117, 120, 125, 133, 136, 141, 149, 152, 157, 165, 168, 173, 181, 184, 189, 197, 200, 205, 213, 216, 221, 245, 248, 253
!
!    This parameter is a comma separated list which specifies
!    the values for the *aggregationFields FID for which
!    update aggregation will be disabled.
!
!    Suggested values :
!    Market Statistics: 21, 37, 53, 69, 85, 101, 117, 133, 149, 165, 181, 197,
!                       213, 245
!    Link Records     : 24, 40, 56, 72, 88, 104, 120, 136, 152, 168, 184, 200,
!                       216, 248
!    Tiles            : 29, 45, 61, 77, 93, 109, 125, 141, 157, 173, 189, 205,
!                       221, 253
!
!    Note: ${inst} is a FID configured in aggregationFields.
!
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${svc}"*seqNumFollowsMarketfeedRules : False
!#help
!    seqNumFollowsMarketfeedRules : { True, False }
!
!    This parameter determines if the RWF's sequenceNo should be set to the
!    Marketfeed's RTL during Marketfeed-to-RWF conversions. Also, if the RTL
!    should be set to the RWF's sequenceNo during RWF-to-Marketfeed conversions.
!
!    Default value: False
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${svc}"*priorityAwareMarketfeed : False
!#help
!    priorityAwareMarketfeed : { True, False }
!
!    This parameter indicates if the Marketfeed contains priority information
!    which is used for Trade-Safe conflation.
!
!    Default value: False
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${svc}"*logGroupStatus : False
!#help
!
!    logGroupStatus: { True, False }
!
!    When this parameter is set to True, the RTC will generate a log message for
!    each group status message received from the provider application or upstream RTC.
!    Log messages will include the group, stream state, data state, state code, and
!    state text, as well as the number of items affected.
!
!    Default value: False
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
! *rtc*initialOpenLimit : 256
!#help
!    initialOpenLimit: { 1 - N requests }
!
!    The initialOpenLimit parameter allows you to control the number of
!    image requests that can be outstanding to the hub RTC for a given
!    server ("open window").
!
!    Default value: 256
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*closePace : 3200
!#help
!    closePace: { 20 - 100000 closes per second }
!
!    Maximum rate of user item closes per second. Update processing is not
!    prioritized over close processing, so caution must be taken when
!    increasing this value. In premium mode, this value is honored per
!    writer thread.
!
!    Default value: 3200
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*minimumOpenWindow : 256
!#help
!    minimumOpenWindow: { 1 - N requests }
!
!    This parameter limits the maximum number of outstanding requests for a sink
!    application.  The open window will always be equal to the minimumOpenWindow
!    when the channel output threshold is at an "ok" level.  When the channel
!    outputThresholdBreach is detected, the open window will immediately be set
!    to 0 so that no further requests are sent to the server.  Once the channel
!    output threshold is back at an "ok" level, the open window will be set back
!    to the minimumOpenWindow.  Care must be taken when setting appropriate
!    values for this parameter.  If set too low, the amount of data received
!    will be small and the open window will not accurately reflect what the
!    application is capable of receiving.  In addition, if no response or a
!    stale status is given for an image request, the channel might be blocked
!    from making image requests from services that are up.  Setting the
!    minimumOpenWindow higher will alleviate these issues.  However, if set too
!    high images can be thrown away if too many requests are made per second.
!
!    Default value: 256
!#end
!
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*sipcFlushLimit : 6100
!#help
!    sipcFlushLimit: { 1 - N bytes }
!
!   When a channel's buffer utilization exceeds the configured value for this
!   parameter, RTC immediately sets the channel's minimumOpenWindow to 0.
!   This is because the RTC knows the channel is starting to fall behind and
!   processing this image request can increase the chance of a channel cut.
!   Though increasing the value of this parameter can improve image throughput,
!   when a channel is processing heavy update traffic, such a change increases
!   the chance of the channel being cut due to an overflow condition.
!   However, if an RTC is configured only for applications making snapshot
!   requests, setting sipcFlushLimit to a high value (e.g., 100000) can help
!   image retrieval without side effects. The high water mark on the channel
!   prevents images from causing a channel cut and because no updates are sent
!   on the channel, only a sudden burst of status events (a very unlikely
!   occurrence) could result in a channel cut.
!
!    Default value: 6100
!#end
!
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*ripcFlushLimit : 6100
!#help
!    ripcFlushLimit: { 1 - N bytes }
!
!   When a channel's buffer utilization exceeds the configured value for this
!   parameter, RTC immediately sets the channel's minimumOpenWindow to 0.
!   This is because the RTC knows the channel is starting to fall behind and
!   processing this image request can increase the chance of a channel cut.
!   Though increasing the value of this parameter can improve image throughput,
!   when a channel is processing heavy update traffic, such a change increases
!   the chance of the channel being cut due to an overflow condition.
!   However, if an RTC is configured only for applications making snapshot
!   requests, setting ripcFlushLimit to a high value (e.g., 100000) can help
!   image retrieval without side effects. The high water mark on the channel
!   prevents images from causing a channel cut and because no updates are sent
!   on the channel, only a sudden burst of status events (a very unlikely
!   occurrence) could result in a channel cut.
!
!    Default value: 6100
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*${svc}*cacheLocation : ssl
!#help
!    cacheLocation: { ssl, srcApp }
!
!    Inidicates where the data cache will be maintained.
!    ssl    - The data cache will be maintained in the RTC.
!    srcApp - The data cache will be maintained in the source application,
!             i.e, the RTC will not cache data.
!
!    Note: Setting this parameter to srcApp has no affect on aggregated
!    services. To disable caching, use domainsCached and domainsNotCached.
!
!    Default value: ssl
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*${svc}*cacheType : sinkDriven
!#help
!    cacheType: { sinkDriven, sourceDriven }
!
!    sinkDriven   - The cache content is determined by sink/network demand.
!                   A sink-driven server is allowed to add an item to its
!                   cache only upon the reception of an Open request.
!                   This type of server functions as an interactive datafeed
!                   handler and was formerly called a "Selective Cache" server.
!    sourceDriven - The cache content is determined solely by the source
!                   application/ datafeed. Network demand has no bearing on
!                   the contents of the cache. A source-driven server is
!                   allowed to add an item to its cache at any time.
!                   This type of server functions as a broadcast datafeed
!                   handler and was formerly called a "Full Cache" server.
!
!    Default value: sinkDriven
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*${svc}*preemption : ssl
!#help
!    preemption: { ssl, srcApp, unwatched, none }
!
!    This parameter is applicable only if 'cacheType' is 'sinkDriven'.
!
!    none   - Preemption will be disabled. Once the cache limit is reached,
!             new item requests will be rejected by the infrastructure.
!
!    ssl    - Preemption will be performed by the infrastructure.
!
!    srcApp - Preemption will be performed by the source application.
!             The infrastructure will not manage the cache size.
!             All new requests will be passed to the source application.
!
!    unwatched - Once the max cache size is reached, the oldest unwatched item
!             will be preempted. If no unwatched items exist, new requests will
!             be rejected. Note, the pending age out queue is used to retrieve
!             unwatched items, so removeUnwatchedItems must be True for this
!             option otherwise preemption of none will be used.
!
!    Default value: ssl
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*${svc}*removeUnwatchedItems : True
!#help
!    removeUnwatchedItems:  { True, False }
!
!    This parameter is applicable only if 'cacheType' is 'sinkDriven'.
!    If an item is closed and its priority class is less than the
!    lockedItemThreshold and removeUnwatchedItems is set to True,
!    the item will be removed from cache after it ages based
!    on the value of ageUnwatchedItemTime. If removeUnwatchedItems
!    is set to False then the item remains in cache without aging.
!
!    Default value: True
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*${svc}*ageUnwatchedItemTime : 3600
!#help
!    ageUnwatchedItemTime: { 0 - n seconds }
!
!    If 'cacheType' is 'sinkDriven'
!    and an item is closed and its priority class is less than the
!    lockedItemThreshold value, and if removeUnwatchedItems is set to True,
!    the item will remain in cache until the specified time (in seconds) after
!    which it is removed. If removeUnwatchedItems is set to False the items
!    remain in cache without aging.
!
!    If 'cacheType' is 'sourceDriven'
!    and convertNotInCacheToImage is True, when a non-existent item is requested
!    from a source-driven server, the item remains in cache until the specified
!    time (in seconds) after which it is removed, but if an item becomes unwatched
!    after it has been watched it is not removed from cache.
!
!    Default value: 3600 (one hour)
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*${svc}*lockedItemThreshold : 5
!#help
!   lockedItemThreshold: { 0 - 11 }
!
!   This parameter is applicable only if cacheType is 'sinkDriven'.
!
!   The lockedItemTreshold and removeUnwatchedItems parameters
!   configure what happens to an item when it becomes unwatched
!   (i.e. when the last/only sink component watching an item drops
!   its interest in the item).  The Source Distributor applies the
!   lockedItemThreshold parameter and then the removeUnwatchedItems
!   parameter to determine if the item should be removed from the
!   cache-list (and what the item's priority should be if it is to
!   remain in the cache-list).
!
!   When an item becomes unwatched, there are three possible
!   outcomes:
!
!   1. The item's priority class is at or above the
!      lockedItemThreshold.
!
!      The item remains in the cache-list with its priority
!      class unchanged and its priority count set to zero.
!
!   2. The item's priority class is below the
!      lockedItemThreshold and removeUnwatchedItems is False.
!
!      The item remains in the cache-list with its priority
!      class set to zero and its priority count set to zero.
!
!   3. The item's priority class is below the
!      lockedItemThreshold and removeUnwatchedItems is True.
!
!      The item is removed from the cache-list after the
!      ageUnwatchedItemTime interval.
!
!   Default value: 5
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*${svc}*overrideLockServiceId : False
!#help
!    overrideLockServiceId: { True, False }
!
!    This parameter indicates whether the RTC should replace the
!    service ID within the DACS access lock with the local service ID,
!    if they are different and the lock is not compounded.
!
!    This must be disabled for DTS and other services that are republishing
!    data where permissioning must be performed against the original service.
!
!    Default value: True
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*${svc}*mapEntryEntitlements : False
!#help
!    mapEntryEntitlements : { True, False }
!
!    This parameter controls whether map entry entitlement checks are enabled. This
!    parameter is only applicable if DACS permission checks are enabled. If true (and
!    DACS permission checks are enabled), the RTC will decode maps and perform a DACS
!    item check for each map entry in the map for all users. Map entries that a user
!    does not have permission for will be filtered out of the map. The map entry level
!    entitlement checks will only be performed once verified the user has the item level
!    permissions.
!
!    Default value: False
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*${svc}*logMapEntryUsage : False
!#help
!    logMapEntryUsage : { True, False }
!
!    This parameter is only applicable if 'mapEntryEntitlements' is set to True.
!    and controls whether DACS usage data should be logged for map entry entitlement
!    checks. If true, DACS usage data will be logged for all permission denials with
!    a map entry action of ADD.
!
!    Default value: False
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*autoGenerateIds : True
!#help
!    autoGenerateIds: { True, False }
!
!    Enables RTC to automatically generate service and server Ids.
!    Note that only a single instance of a given service is allowed
!    across all routes. The service Ids and server Ids are automatically
!    generated in the range from minAutogeneratedId to maxAutogeneratedId.
!
!    The service Ids and/or the server Ids can be explicitly specified
!    in this configuration file and will be used by the RTC instead
!    of auto-generated values. In such case, user is responsible for
!    resolving clashes of Ids.
!
!    In the mixed case where autoGenerateIds is used in conjunction with
!    with explicitly defined Ids, those Ids should be defined out of range.
!
!    Default value: True
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*minAutogeneratedId : 10000
!#help
!    minAutogeneratedId: { 256 - 65531 }
!
!    The minimum value of automatically generated service and server Ids.
!
!    Default value: 10000
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*maxAutogeneratedId : 15000
!#help
!    maxAutogeneratedId: { 256 - 65531 }
!
!    The maximum value of automatically generated service and server Ids.
!
!    Default value: 15000
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${svc}"*dataErrorLog : True
!#help
!    dataErrorLog: { True, False }
!
!    Enables RTC to log cache data errors with the item name and
!    details of the error.
!
!    Default value: True
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${svc}"*nonRecoverablePolling : False
!#help
!    nonRecoverablePolling: { True, False }
!
!    This parameter specifies whether or not the RTC will automatically
!    try another server in a service when a server responds with a NON-
!    RECOVERABLE open request response. If this parameter is set to 'True',
!    then the RTC will attempt to retrieve the item from the next least
!    loaded server.
!
!    Note: Illegal Item names fall into the NON-RECOVERABLE category. This
!          would cause the RTC to call the 'Illegal' item from all the
!          servers within the service. This could cause problems with
!          certain data feeds that limit the number of requests allowed.
!
!    Default value: False
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${svc}"*normalizedLoadLevelForConcurrentRequests : 95
!#help
!    normalizedLoadLevelThresholdForConcurrentRequests: { 0 - 100 }
!
!    This parameter value is expressed as a percentage (0 to 100). The
!    infrastructure calculates the load level threshold by multiplying
!    the maximum load level (65,535) by this percentage.
!    This parameter allows the RTC to distribute Open Requests for new
!    items (not in cache) across multiple servers in parallel as follows:
!    a) The RTC will regard all servers having a normalized load level less than
!       or equal to this threshold value as equal for load balancing purposes.
!       That is, the RTC will route an Open Request for a new item to the server
!       within this subset having the least number of outstanding requests for
!       new items. If all the servers within this subset become blocked (which
!       means that the server's "maximum number of outstanding requests for new
!       items" limit has been reached), the RTC will stop sending Open Requests
!       for new items to the service until one of these servers unblocks.
!       (Note: If an item request is denied by a server, it will be sent to the
!       least loaded server which has not yet been tried even if this server is
!       blocked.)
!    b) If no servers have a normalized load level less than or equal to this
!       threshold value, an Open Request for a new item will be sent to the
!       absolutely least loaded server. Once this server becomes blocked, the
!       RTC will stop sending Open Requests for new items to the entire service
!       until the least loaded server unblocks. (Note: If an item request is
!       denied by this server, it will be sent to the next least loaded server
!       even if this server is blocked.)
!
!    Note: The threshold calculation does not take into account the
!          maxLoadLevel parameter.  If the source server is not using the
!          entire load range (0 to 65535), this percentage should be lowered
!          appropriately.
!          Example:  A healthy ISFS broadcasts a maximum load of 32767; this
!                    parameter should be 45%.
!
!    Default value: 95
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*${svc}*newsNameList : N2_UBMS NFCP_UBMS
!#help
!    newsNameList: N2_UBMS NFCP_UBMS
!
!    List of item names that will be checked for headline permissioning.
!
!    Default value: N2_UBMS NFCP_UBMS
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*${svc}*headlinePermissioning : True
!#help
!    headlinePermissioning: { True, False }
!
!    This parameter determines whether the RTC will perform permission
!    checks against updates for item names specified in the newsNameList.
!
!    Default value: True
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*headlinePermissioningLogging : False
!#help
!    headlinePermissioningLogging: { True, False }
!
!    When this parameter is enabled, the RTC will log (dbg) all the
!    usernames that were denied a headline, as well as the PE list passed
!    by the headline when at least one user was denied a headline. If all
!    users received the headline, nothing will be logged.
!
!    Default value: False
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*${svc}*nonCachingItemList :
!#help
!    nonCacheItemList:
!
!    This parameter is a comma separated list of regular expressions that
!    specifies items which are not to be cached. Items with RIC names
!    matching a regular expression in the list will not be cached and all
!    requests for those items will be forwarded upstream.
!
!    Note: All downstream RSSL-based components will be unable to cache
!    any item specified in this list as every refresh and udpate message
!    for these items will be marked as do-not-cache.
!
!    Examples:
!
!    IBM => all RICs containing "IBM" will not be cached
!    ^IBM => all RICs beginning with "IBM" will not be cached
!    IBM$ => all RICs ending with "IBM" will not be cached
!    ^IBM$ => the RIC "IBM" will not be cached
!
!    Default value: none
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*${svc}*nonCachingItemFile :
!#help
!    nonCachingItemFile:
!
!    If this parameter is defined, it must specify the path name (full
!    or relative) of a 'nonCachingItems' file. This file must contain one
!    regular expression entry per line. Items with RIC names matching a
!    regular expression in the file will not be cached and all requests
!    for those items will be forwarded upstream.
!
!    Note: All downstream RSSL-based components will be unable to cache
!    any item specified in this list as every refresh and udpate message
!    for these items will be marked as do-not-cache.
!
!    Examples:
!
!    IBM => all RICs containing "IBM" will not be cached
!    ^IBM => all RICs beginning with "IBM" will not be cached
!    IBM$ => all RICs ending with "IBM" will not be cached
!    ^IBM$ => the RIC "IBM" will not be cached
!
!    Note: It is recommended that this filename incorporate the service name
!          so as to avoid accidentally sharing the same filename used by
!          another service.
!
!    Default value: none
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*${svc}*convertNotInCacheToImage : False
!#help
!    convertNotInCacheToImage: { True, False }
!
!     This parameter is applicable only if 'cacheType' is set to 'sourceDriven'.
!     When this parameter is set to True, a image is sent with data defined in
!     the parameter 'notInCacheData' instead of a CLOSED status when a non-existent
!     item is requested from the server.
!
!    Default value: False
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*${svc}*clearNotInCacheImageWhenActive : False
!#help
!    clearNotInCacheImageWhenActive: { True, False }
!
!    When convertNotInCacheToImage is set to True, this parameter will instruct
!    the RTC whether to clear the not-in-cache image data from cache when the item
!    goes active.
!
!    Default value: False
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*${svc}*notInCacheData : DSPLY_NAME, Not In Cache
!#help
!    notInCacheData:
!
!    This parameter is applicable only if 'cacheType' is 'sourceDriven' and
!    'convertNotInCacheToImage' is set to True.
!
!    - A comma separated list of FID and value pairs.
!    - All fields must be text (MF ALPHANUMERIC).
!    - The FIDs may be specified by either numeric or ACRONYM.
!    - FID range is -32768 to 32767, with zero (0) being an illegal value.
!
!    If any of the FIDs are illegal, an error is logged and the feature is turned off.
!
!    Default value: DSPLY_NAME, Not In Cache
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*${svc}*notInCacheFLN :
!#help
!    notInCacheFLN:
!
!    This parameter is applicable only if 'cacheType' is 'sourceDriven' and
!    'convertNotInCacheToImage' is set to True.
!
!    - A FLN (template number) as a numeric value is permitted.
!    - Range is -32768 to 32767 with zero (0) being an illegal value.
!
!    This value may also be blank, which indicates no FLN value should be present.
!
!    Default value: NONE
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*${svc}*markGroupsSuspectOnPublisherDown : True
!#help
!    markGroupsSuspectOnPublisherDown: { True, False }
!
!    (Applies to aggregate services only)
!
!    This parameter instructs the RTC to generate group outage notification
!    when publisher applications within the source list of an aggregate service
!    go inactive. Publisher applications go inactive through either marking the
!    application service as down or disconnecting from the RTC.
!
!    When set to True, a group status of either suspect or closed recoverable
!    will be generated for each group that has been seen from the publisher
!    application.
!
!    - When one or more active publisher applications still exist for a group,
!      the RTC will generate a group status of suspect. All items within the
!      group will remain in cache and will be marked stale, allowing the remaining
!      active publisher applicationS the ability to continue publishing to the
!      group of items.
!
!    - When a group no longer has any active publisher applications, the RTC
!      will generate a group status of closed recoverable causing all items
!      within the group to be removed from cache and undergo sink-led recovery.
!
!    When set to False, the RTC will not generate group outage notification
!    when publisher applications within the source list of an aggregate service
!    go inactive. All items will remain in cache and the state of the items will
!    remain unchanged.
!
!    Default value: True
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${svc}"*suspectOnLastPublisherDown : False
!#help
!    suspectOnLastPublisherDown: { True, False }
!
!    (Applies to aggregate services only)
!
!    When markGroupsSuspectOnPublisherDown is set to True, this parameter
!    instructs the RTC to generate group outage notification when any
!    publisher application to the group goes inactive (False), or only
!    when the last remaining active publisher application to the group
!    goes inactive (True).
!
!    Default value: False
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*${svc}*leaveInactiveItemsInCache : False
!#help
!    leaveInactiveItemsInCache: { True, False }
!
!    (Applies to aggregate services only)
!
!    This parameter instructs the RTC whether to leave inactive items
!    in cache.
!
!    When set to True with markGroupsSuspectOnPublisherDown enabled, the
!    RTC will instead generate a group status of suspect when the last
!    active publisher application to the group goes inactive. This will
!    cause all inactive items within the group to remain in cache and to
!    be marked as stale.
!
!    When set to True with markGroupsSuspectOnPublisherDown disabled, all
!    inactive items will remain in cache as publisher applications go
!    inactive and the state of the items will remain unchanged.
!
!    With this feature enabled, once created, the aggregate service will
!    remain up, even when no active publisher applications within the
!    source list remain.
!
!    Default value: False
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*${svc}*markItemsOkOnUpdate : False
!#help
!    markItemsOkOnUpdate: { True, False }
!
!    (Applies to aggregate services only)
!
!    This parameter instructs the RTC to unstale items on the next update.
!
!    When group outage notification is enabled and following one or more
!    publisher applications going inactive within the aggregate service,
!    all items within all groups from those publisher applications will be
!    be marked as stale. Remaining active publisher applications may be
!    unaware of the outage and administrators may want the ability to unstale
!    the items when the next update for the item is received following an
!    outage. Setting this parameter to True will provide that feature.
!
!    Default value: False
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*${svc}*forwardPostUserInfo : False
!#help
!    forwardPostUserInfo: { True, False }
!
!    This parameter instructs the RTC for non-interactive services to forward
!    post user information received on the post message header or from DACS for
!    non-interactive publishers to downstream consumer applications within the
!    refresh, update, or status message if not already present. Enabling this
!    parameter will force the RTC to re-encode the message header which will
!    have some performance cost.
!
!    Default value: False
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*${svc}*dumpAccessLockFileName :
!#help
!   dumpAccessLockFileName: { path and filename }
!
!   This parameter specifies the location and name of the item access lock
!   dump file for the service. This parameter is used when "dumpAccessLock"
!   variable in rtcmon (Service Statistics -> Attributes) is changed to "True".
!
!   Default value: ./<serviceName>_pe.dump
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*${svc}*dumpAuditUserInfoFileName :
!#help
!   dumpAuditUserInfoFileName: { path and filename }
!
!   This parameter specifies the location and name of the item audit user info
!   dump file for the service. This parameter is used when "dumpAuditUserInfo"
!   variable in rtcmon (Service Statistics -> Attributes) is changed to "True".
!
!   Default value: ./<serviceName>_audit.dump
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*${svc}*convertMfeedDataToRWF : False
!#help
!   convertMfeedDataToRWF: { True, False }
!
!    This parameter controls the optional data format conversion built into the
!    RTC. If set to True, data received in Marketfeed format will be
!    converted to and cached in RWF Field List format. If set to False, data
!    received in Marketfeed format will remain as is and cached in Marketfeed
!    format.
!
!    Default value: False
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*${svc}*dataTypeForMFBinaryFID : MF_Binary
!#help
!    dataTypeForMFBinaryFID: { MF_Binary, Opaque, Base64, Base64IDN }
!
!    This parameter controls Marketfeed binary to RWF buffer format convertion.
!
!    One of the following values MUST be specified:
!    MF_Binary  - convert MF characters (0x40 to 0x7f) <-> RWF buffer
!    Opaque     - no convertion between MF binary and RWF buffer but direct copy.
!                 For this option, MF binary character can be any ascii value.
!    Base64     - convert MF characters (0x40 to 0x7f) <-> RWF buffer using SFC Base64 pack/unpack function
!    Base64IDN  - convert MF characters (0x40 to 0x7f) <-> RWF buffer using SFC Base64IDN pack/unpack function
!
!    Default value: MF_Binary
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*${svc}*validateMfeedToRWFConvForPosts : False
!#help
!   validateMfeedToRWFConvForPosts: { True, False }
!
!   This parameter controls the RTC behavior when it has to convert
!   Marketfeed data to RWF format for posts/inserts. If enabled, RTC will
!   NAK conversion failures because of invalid data formats in the Marketfeed
!   payload i.e. any conversion failures when creating the RWF field list from
!   the MF payload data.
!
!   Default value: False
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*createAccessLocks : False
!#help
!   createAccessLocks: { True, False }
!
!   When this parameter is set to True, a DACS lock will be created and cached for
!   each item from parsing the payload for FID 1 (PROD_PERM). This is supported for
!   both Marketfeed and RWF (Field List) providers and publishers. There will be
!   some performance impact when enabling this feature within the RTC.
!
!   Default value: False
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*createLockForPEZero : False
!#help
!   createLockForPEZero: { True, False }
!
!   When createAccessLocks is set to True, this parameter indicates whether to create
!   a DACS lock for an item which contains a value of 0 within FID 1 (PROD_PERM).
!
!   Default value: False
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*createInsertLocks : False
!#help
!   createInsertLocks: { True, False }
!
!   When this parameter is set to True, a DACS lock will be created for each SSL insert
!   from parsing the Marketfeed payload for FID 1 (PROD_PERM). RTC will internally force
!   this parameter to True when DACS publishing rules are enabled for the service . There
!   will be some performance impact when enabling this feature within the RTC.
!
!   Default value: False
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*supportPersistentCache : False
!#help
!
!   supportPersistentCache: { True, False }
!
!   This parameter will enable the loading of items and images from a
!   persistent file, if available, upon startup.  This parameter will also
!   enable the persistent thread to write the cache contents to a
!   persistent file.  Persistence only applies to non-interactive source
!   applications.
!
!   Default: False
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*enablePersistentOnShutdown : False
!#help
!   enablePersistentOnShutdown: { True, False }
!
!   This parameter will enable non-interactive servers to dump their
!   cache contents to a persistent file when the RTC shuts down.
!
!   Default: False
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*persistentCacheDirectory : ./persistence
!#help
!   persistentCacheDirectory:
!
!   The directory in which to find files to load cached items, or create files
!   for dumping cache contents.
!
!   Default: ./persistence
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*persistentCacheServiceList :
!#help
!   persistentCacheServiceList:
!
!   A comma delimited list of services to load their respective
!   persistent caches upon startup.  Services listed in the
!   service list will have a persistent cache application available
!   for connections immediately after program initialization.
!
!   Default value: None
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*ignorePersistentOnStartupServiceList :
!#help
!   ignorePersistentOnStartupServiceList:
!
!   A comma delimited list of services that are defined to have
!   persistence enabled but requuired to ignore loading of Persistence
!   file on start up.
!
!   Default value: None
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*${svc}*persistentRestoreAsStale : True
!#help
!    persistentRestoreAsStale: { True, False }
!
!    Determines if images stored in persistent cache file will be loaded as
!    activeStale or activeOkay.  Images will be loaded as activeStale when
!    set to True.  The persistent cache feature must be enabled in order
!    to load images.
!
!    Default value: True
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*${svc}*persistentCacheDomains : MARKET_PRICE
!#help
!
!    persistentCacheDomains: MARKET_PRICE
!
!    A comma-separated list of domains (numeric for shorthand) to be persisted.
!    Any domain not in the list will not be loaded and dumped to persistent files.
!
!        MARKET_PRICE (6)    : Quotes and Trades
!        MARKET_BY_ORDER (7) : Market by Order/Order Book Message
!        MARKET_BY_PRICE (8) : Market by Price/Market Depth Message
!        MARKET_MAKER (9)    : Market Maker Message
!        SYMBOL_LIST (10)    : Symbol Lists
!
!    For custom (non-RDM) domains that should be persisted, the domains
!    can be added to the list via numeric value.
!
!    This parameter also controls the initial capability list advertised
!    in the source directory when the persistent service starts.
!
!    Default value: MARKET_PRICE
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*supportCacheResiliency : False
!#help
!   supportCacheResiliency: { True, False }
!
!   This parameter enables the cache resiliency download functionality.
!
!   Default value: False
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*CacheResiliency*serviceList :
!#help
!   serviceList: [<ServiceName1>], [<ServiceName2>] ...
!
!   This parameter is a comma separated list of service names for which the
!   RTC will attempt to download cache from the configured partner RTC. This
!   parameter will take effect only if supportCacheResiliency is set to True.
!
!   Default value: None
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*CacheResiliency*listenPort : distribution_cacheres_sink
!#help
!   listenPort:
!
!   This parameter specifies the port on which RTC listens
!   for incoming cache resiliency download requests.
!
!   Default Value: distribution_cacheres_sink
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*CacheResiliency*distribution_cacheres_sink*connectionType : 0
!#help
!    connectionType: { 0 - 1 }
!
!    This parameter specifies the connection type for the cache resiliency server
!    which will listen for incoming cache resiliency download requests. There are
!    currently two supported RSSL connection types:
!
!             0: Standard TCP socket
!             1: Encrypted connection
!
!    Default Value: 0 (socket)
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*CacheResiliency*distribution_cacheres_sink*serverCert :
!#help
!    serverCert:
!
!    This parameter specifies the path and file name of the server certificate for
!    this encrypted cache resiliency server, if the connection type for this server
!    is set to encrypted(1). For any other connection types, this parameter has no effect.
!
!    Default Value: none
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*CacheResiliency*distribution_cacheres_sink*serverPrivateKey :
!#help
!    serverPrivateKey:
!
!    This parameter specifies the path and file name of the server's private key for
!    this encrypted cache resiliency server, if the connection type for this server
!    is set to encrypted(1). For any other connection types, this parameter has no effect.
!
!    Default Value: none
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*CacheResiliency*distribution_cacheres_sink*cipherSuite :
!#help
!    cipherSuite:
!
!    This parameter specifies an optional OpenSSL-formatted cipher suite string for
!    this encrypted cache resiliency server, if the connection type for this server
!    is set to encrypted(1). By default, both client and server connections ESDK
!    use an default cipher selections recommended by OWASP, if this parameter was
!    leaving to blank.
!
!    Note: It is recommended to leave this parameter blank and use the ESDK's default,
!    unless you actually have a requirement to change this(i.e. For clients that are
!    running with very old/ancient version connections.)
!
!    Default Value: none
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*CacheResiliency*distribution_cacheres_sink*dhParams :
!#help
!    dhParams:
!
!    This parameter specifies an optional Diffie-Hellman parameter file for this
!    encrypted cache resiliency server, if the connection type for this server
!    is set to encrypted(1). If this is not present or leaving to blank, ESDK
!    will load it's default built-in DH parameters set.
!
!    Note: It is recommended to leave this parameter blank and use the ESDK's default
!    value, unless you actually have a requirement to generate your own parameters
!    (i.e. Due to clients were not working with the larger default cipher.)
!
!    Default Value: none
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${svc}"*cacheResDomains : MARKET_PRICE
!#help
!    cacheResDomains:
!
!    A comma-separated list of domains (numeric for shorthand) that the server
!    will download in response to cache resiliency requests for this service.
!    Any domain not in the list will not be downloaded.
!
!        MARKET_PRICE (6)    : Quotes and Trades
!        MARKET_BY_ORDER (7) : Market by Order/Order Book Message
!        MARKET_BY_PRICE (8) : Market by Price/Market Depth Message
!        MARKET_MAKER (9)    : Market Maker Message
!        SYMBOL_LIST (10)    : Symbol Lists
!        ALL                 : All Domains
!
!    For custom (non-RDM) domains that should be downloaded, the domains
!    can be added to the list via numeric value.
!
!    Default value: MARKET_PRICE
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*CacheResiliency*cacheResDownloadPace : 50000
!#help
!   cacheResDownloadPace: { 0 - n bytes }
!
!   This parameter specifies the number of bytes sent by the cache resiliency
!   server for each active download session per iteration.
!
!   Default value: 50000
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*${svc}*CacheResiliency*hostList :
!#help
!   hostList : [host1], [host2],
!
!   A comma-separated list of hosts to connect for cache download of this
!   service. supportCacheResiliency configuration parameter must be set to
!   True for this parameter to be used.
!
!   Default value: None
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*${svc}*CacheResiliency*port : distribution_cacheres_sink
!#help
!   port:
!
!   The port to connect for cache resiliency download. supportCacheResiliency
!   configuration parameter must be set to True for this parameter to be used.
!
!   Default value: distribution_cacheres_sink
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*${svc}*CacheResiliency*rsslConnectionType : socket
!#help
!    rsslConnectionType: { socket, encrypted }
!
!    The rssl connection type for this cache resiliency download. supportCacheResiliency
!    configuration parameter must be set to True for this parameter to be used.
!
!   Default value: socket
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*${svc}*CacheResiliency*sslCAStore :
!#help
!    sslCAStore:
!
!    The path and filename of the OpenSSL Certificate store for encrypted cache
!    resiliency download. This will be used by any OpenSSL encrypted connection
!    for certificate validation.This parameter will take effect only if
!    rsslConnectionType is set to encrypted.
!
!   Default value: socket
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*${svc}*manageSourceGroups : False
!#help
!    manageSourceGroups: { True, False }
!
!    (Applies to aggregate services only)
!
!    This parameter instructs the RTC whether to manage source groups.
!
!    When set to False (default), the RTC will not manage source groups and it
!    is the responsibility of each publisher application to manage and assign all
!    groups for both unique and common item sets.
!
!    When set to True, the RTC will remap publisher groups from 0 to the
!    uniqueGroupThreshold so that the groups are unique across publisher applications
!    within the application service. This allows publisher applications of unique item
!    sets not to have to maintain unique groups across publishers.
!
!    Default value: False
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*${svc}*uniqueGroupThreshold : 5
!#help
!    uniqueGroupThreshold: { 0, 65535 }
!
!    (Applies to aggregate services only)
!
!    When manageSourceGroups is enabled, this parameter is the range of groups (from 0 to
!    the uniqueGroupThreshold), that will be remapped by the RTC per publisher application.
!    These groups must be used for unique items sets only. For common item sets, each
!    publisher application is still responsible for maintaining and assigning the groups
!    across the application service.
!
!    Default value: 5
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*${svc}*commonGroupThreshold : 100
!#help
!    commonGroupThreshold: { 0, 65535 }
!
!    (Applies to aggregate services only)
!
!    When manageSourceGroups is enabled, this parameter is the range of groups (from
!    uniqueGroupThreshold + 1 to the commonGroupThreshold), which will not be remapped by
!    the RTC. Groups above this threshold must not be used by publisher applications as
!    this space is reserved for distribution group mapping.
!
!    Default value: 100
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*${svc}*enablePublisherAugmentation : False
!#help
!    enablePublisherAugmentation: { True, False }
!
!    This parameter allows non-interactive and insert/posting publishers to
!    augment fields within the cache based on the 'publisherAllowedFieldList'
!    configuration parameter.
!
!    Publisher augmentation is applicable only if 'cacheType' is set to 'sinkDriven'
!    and 'cacheLocation' is set to 'ssl'.
!
!    Note, when enabling 'numItemThreads' and performing augmentation via non-interactive
!    publishers, 'enableOnInboundThreads' must be False on the interactive route.
!
!    Default value: False
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
!*rtc*${svc}*publisherAllowedFieldList :
!#help
!    publisherAllowedFieldList:
!
!    This parameter is applicable only if 'enablePublisherAugmentation' is set
!    to True. To augment fields from an insert/posting publisher, 'applyPostsToCache'
!    must be set to True as well for the service.
!
!    - A comma separated list of fields.
!    - Fields must be defined in the RDMFieldDictionary.
!    - Range is -32768 to 32767, with zero (0) being an illegal value.
!
!    If any of the fields are illegal, an error is logged. Augmentation messages
!    will be ignored if 'publisherAllowedFieldList' is not defined or is empty.
!
!    Default value: none
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
!*rtc*${svc}*applyPostsToCache : False
!#help
!    applyPostsToCache: { True, False }
!
!    This parameter is applicable if 'enablePublisherAugmentation' is set to
!    True or 'cacheType' is set to 'sourceDriven'. Allows post providers to augment
!    items in the cache instead of sending the post to the provider.
!
!    Default value: False
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
!*rtc*${svc}*augRemapRefreshUpdateType :
!#help
!    augRemapRefreshUpdateType: { 0 - 255 }
!
!    This parameter is applicable only if 'enablePublisherAugmentation' is set to True.
!    Defines the update type to use when sending an update message as a result of a
!    augmentation refresh message.
!
!    Default value: 0 (UNSPECIFIED)
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
!*rtc*${svc}*augRemapUpdateType :
!#help
!    augRemapUpdateType: { 0 - 255 }
!
!    This parameter is applicable only if 'enablePublisherAugmentation' is set to True.
!    Defines the update type to use when sending an update message as a result of a
!    augmentation update message. If this parameter is not defined or is empty, the
!    update type from the original augmentation update message will be used.
!
!    Default value: 0
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*${svc}*enableSourceBlending : False
!#help
!    enableSourceBlending: { True, False }
!
!    Parameter controls the enabling of interactive source blending. Administrators
!    must define the primary and secondary providers within the route configuration.
!
!    Default value: False
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*${svc}*waitForSecondaryResponses : True
!#help
!    waitForSecondaryResponses: { True, False }
!
!    Parameter controls whether interactive source blending will wait for responses
!    from all secondary providers or send the response from the primary immediately.
!
!    Default value: True
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*${svc}*protectPrimaryFields : False
!#help
!    protectPrimaryFields: { True, False }
!
!    Parameter controls whether interactive source blending will protect primary
!    fields from being modified from secondary providers.
!
!    Default value: False
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*${svc}*blankSecondaryFields : False
!#help
!    blankSecondaryFields: { True, False }
!
!    Parameter controls whether interactive source blending will blank fields
!    from secondary providers on server and item outages. protectPrimaryFields
!    must be enabled for this feature.
!
!    Default value: False
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*${svc}*secondaryBlankRate : 1000
!#help
!    secondaryBlankRate: { 20, MaxNumeric }
!
!    Parameter controls the number of updates which interactive source blending
!    will send per second to blank secondary field values. Runtime changeable.
!
!    Default value: 1000
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*${svc}*secondaryRetryTime : 120
!#help
!    secondaryRetryTime: { 20, MaxNumeric }
!
!    Parameter controls the amount of time in seconds secondary open failures
!    will be retried.
!
!    Default value: 120
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*${svc}*secondaryRetryLimit : 3
!#help
!    secondaryRetryLimit: { -1, MaxNumeric }
!
!    Parameter controls the number of attempts secondary open failures will
!    be retried. Value of -1 will retry forever. Runtime changeable.
!
!    Default value: 3
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*${svc}*logSecondaryOpenFailures : False
!#help
!    logSecondaryOpenFailures: { True, False }
!
!    Parameter controls whether to log open and outage failures for secondary
!    items. Runtime changeable.
!
!    Default value: False
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*pendingToSrcAppTimeout : 5
!#help
!    pendingToSrcAppTimeout: { 1 - N minutes }
!
!    Time interval in minutes that the RTC will wait for a response to
!    a request from the Source Application before re-requesting.
!
!    Default value: 5
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${svc}"normalRetryTime : 120
!#help
!    normalRetryTime: { 1 - N seconds }
!
!    If an item cannot be obtained from any available server, either on
!    the initial request, after a server failure, or upon a closed recoverable
!    status from the provider, for clients with single open enabled, the RTC
!    will attempt to re-open the item after this amount of time (in seconds)
!    has elapsed.
!
!    Default value: 120 seconds
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${svc}"normalRetryLimit : -1
!#help
!    normalRetryLimit: { -1, 0 - N retries }
!
!    Specifies the maximum number of times the RTC will retry an item
!    from the normal retry queue. Once the the normal retry limit has
!    been exceeded, the item will be closed and an item status message
!    with stream state of closed will be sent to the client. Default
!    value of -1 instructs the RTC to retry forever.
!
!    Default value: -1 (retry forever)
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${svc}"normalRetryText :
!#help
!    normalRetryText:
!
!    Overrides the status text to be sent to clients when the normal
!    retry limit is exceeded. RTC will forward the last received status
!    text by default.
!
!    Default value: none (last received status text)
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*trafficManagement : False
!#help
!    trafficManagement:  { True, False }
!
!    This parameter enables the traffic management algorithm as described in the
!    RTC installation guide.
!
!    Enabling this algorithm may result in several update events for an item
!    to be consolidated into one in order to prevent the connection to client
!    applications from being severed due to buffer overflow.  Enable this
!    parameter only if tick by tick data is not required by all applications
!    connected to the RTC.  The merging of update events will affect all items
!    except for N2_UBMS and NFCP_UBMS.
!
!    RTC does not incur a noticeable overhead when this algorithm is enabled.
!    However, additional CPU and memory resources are required while the traffic
!    management algorithm is active due to one or more channels in overflow.
!
!    This parameter may optionally be scoped on a per-service basis.
!
!    Default value: False
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*logTrafficManagement : False
!#help
!    logTrafficManagement:  { True, False }
!
!    This parameter determines whether or not the RTC will generate log messages
!    to the RTC log file when a channel is being traffic managed.  This parameter
!    is only used when traffic management is enabled.
!
!    Default value: False
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*insertThrottleMsgs : 1500
!#help
!    insertThrottleMsgs: { 0 - n messages}
!
!    Insert throttle rate (number of inserts/posts per-second, 0 - unlimited)
!    across all users.
!
!    Default value: 0 (unlimited)
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
! *rtc*insertThrottleBytes : 0
!#help
!    insertThrottleBytes: { 0 - n bytes }
!
!    Insert throttle rate (bytes per-second, 0 - unlimited) across all users.
!
!    Default value: 0 (unlimited)
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*supportWarmStandby : False
!#help
!    supportWarmStandby: { True, False }
!
!    This parameter is to enable Warm Standby on the consumer side.
!
!    Default value: False
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*standbyForwardInsertToAdh : True
!#help
!    standbyForwardInsertToAdh: { True, False }
!
!    This parameter indicates whether the standby server will process
!    insert and post messages. If False, the standby server will not
!    process insert or post messages. Warm Standby must be enabled to
!    use this feature.
!
!    Default value: True
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
! [SSL/RSSL Data Quality Assurance]
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*disconnectSrcDown : True
!#help
!    disconnectSrcDown: { True, False }
!
!    This parameter indicates whether sink applications will be disconnected
!    when all services are down.
!
!    Default value: False
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*disconnectSingleSrcDown : False
!#help
!    disconnectSingleSrcDown: { True, False }
!
!    This parameter indicates whether sink applications will be disconnected
!    when ANY/ONE service is down.
!
!    Default value: False
!
!    Note: This value has to be set to False when using the NDS Agent.
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*disconnectServiceList :
!#help
!    disconnectServiceList: <service name1> , <service name2> , ...
!
!    This parameter indicates whether sink applications will be disconnected
!    when ANY/ONE service in list is down. But if this list is empty then the
!    RTC will disconnect sink applications when ANY/ONE service is down.
!    This parameter is used only when "disconnectSingleSrcDown" is true.
!
!    Default value: <empty>
!
!    Note : Service names are case sensitive.
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
! [SSL/RSSL Client Transport]
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${port}"*compressionType : 0
!#help
!    compressionType: { 0 - 2 }
!
!    The RTC supports data compression, which saves bandwidth at the
!    expense of CPU utilization. The downstream component asks for
!    compressed data by specifying, during channel initilization, the
!    compression type that it has available. The RTC then indicates
!    whether data compression is enabled or not.
!
!    The compressionType parameter specifies the compression type that
!    will be used for the data compression. There are currently two
!    defined compression types:
!
!         0: No compression
!         1: Z-lib compression
!         2: LZ4 compression (RSSL only)
!
!    Some compressors (e.g. Z-lib) have multiple compression levels
!    (which trade off compression versus CPU utilization). The RTC
!    chooses the compression level. LZ4 compression is not supported
!    for SSL and WebSocket based connections.
!
!    If compressionType is zero (0), data compression is disabled.
!
!    Default value: 0
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${port}"*zlibCompressionLevel : 3
!#help
!    zlibCompressionLevel: { 1 - 9 }
!
!    Z-lib compression has multiple compression levels (which trade off
!    compression versus CPU utilization). If compressionType is 1 for both
!    the RTC and the Source Distributor, the zlibCompressionLevel parameter
!    specifies the level of Z-lib compression that will be used for data
!    compression. Z-lib has compression levels 1 (lowest compression ratio)
!    through 9 (highest compression ratio).
!
!    Default value: 3
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${port}"*minCompressionThreshold : 30
!#help
!    minCompressionThreshold: { 30 - N }
!
!    If compression is enabled, any message larger than this value will be
!    compressed. If this parameter is set to 0 then for zlib it will default
!    to 30 and for LZ4 it will default to 300. In case a value less than 30
!    is given then it will default to 30.
!
!    Default value: 30  (zlib)
!                   300 (LZ4)
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${port}"*maxMounts : 256
!#help
!    maxMounts: { 1 - 4096 mounts }
!
!    Defines the maximum number of mounts which can be mounted to the
!    RTC concurrently.
!
!    If performing REST snapshot requests, increase this value as necessary.
!
!    Default value: 256
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${port}"*guaranteedOutputBuffers : 200
!#help
!    guaranteedOutputBuffers: { 1 - N buffers }
!
!    The number of output buffers guaranteed per channel.
!
!    Default value: 200
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${port}"*maxOutputBuffers : 400
!#help
!    maxOutputBuffers: { 1 - N buffers }
!
!    The maximum number of output buffers to allocate per channel.
!    The (maxOuputBuffers - guaranteedOutputBuffers) defines the number of
!    buffers to be dynamically created to be requested as needed from the pool
!    per channel. Mounts will initially be allocated the guaranteedOutputBuffers
!    and can take more from the buffer pool as needed until they reach the
!    maxOutputBuffers limit.
!
!    Default value: 400
!    Default WebSocket connection value: 4000
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${port}"*outputThresholdOK : 30
!#help
!    outputThresholdOK: { 1 - 100 percent }
!
!    This parameter along with the outputThresholdBreach is part of the flow
!    control feature. This indicates the percent of the buffer that states the
!    buffer is at an "ok" level and the channel may request freely.
!    Note: This is the level at which a burdened channel must wait to
!    drop to in order to resume requesting.
!
!    Default value: 30
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${port}"*outputThresholdBreach : 60
!#help
!    outputThresholdBreach: { 1 - 100 percent }
!
!    This parameter along with the outputThresholdOK is part of the flow control
!    feature. This is the percentage of the buffer, that when reached, will stop
!    the channel from requesting. The channel may once again resume requests when
!    the percentage of the buffer burdened falls below the outputThresholdOK level.
!    Any pending requests when the outputThresholdLBreach level is reached are put
!    on a queue, and re-requested when the channel resumes requesting. Any image
!    response recieved when the outputThresholdBreach is reached will be discarded
!    and requests will be put on queue to be issued when the level falls below the
!    outputThresholdOK level.
!
!    Default value: 60
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${port}"*poolSize : 16000
!#help
!    poolSize: { 1 - N buffers }
!
!    The number of buffers in the overflow pool. This is the number of buffers that
!    are available to be "borrowed" during high request rates from
!    all channels, and returned to the pool when they are no longer needed.
!
!    We assume that some channels will need more buffers than others at a time.
!    It is recommended that poolSize / maxMounts is less than
!    (maxOutputBuffers - guaranteedOutputBuffers), as not all channels should borrow
!    up to maxOutputBuffers at the same time.
!
!    Setting the poolSize to be equal or greater than
!    maxMounts * (maxOutputBuffers - guaranteedOutputBuffers) provides no value and
!    defeat the purpose of the pool.
!    If all channels should be allowed to get up to maxOutputBuffers at the same time,
!    simply use guaranteedOutputBuffers.
!
!    Default value is set so that approximately 80 channels would get up to
!    maxOutputBuffers at the same time.
!    The default buffer pool requires 96 MB and 1.8 GB of memory approximately for
!    the RSSL server and WebSocket server respectively.
!
!    Default value: 16000
!    Default WebSocket connection value: 300000
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*sessionStatsWindow : 1
!#help
!    sessionStatsWindow: { 0 - N seconds }
!
!    This parameter defines the IPC Session statistics calculation window in seconds.
!    Note: If sessionStatsWindow is set to 0, IPC Session statistics will be disabled.
!
!    Default value: 1
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*persistenceRecoveryTime : 600
!#help
!
!    This parameter specifies the maximum period of time in seconds that
!    the persistent mount will remain after the channel has been disconnected.
!    If the consumer application does not reconnect within the time limit, the mount
!    will be removed.
!
!    Default value: 600
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*sslMsgPacking : True
!#help
!
! sslMsgPacking : { True, False }
!
! This parameter defines whether multiple SSL message will be packed by the
! RTC into a single SIPC message.  The RTC will batch messages to each channel
! up to flushInterval milliseconds or until the maximum message size of
! approximately 3000 bytes is reached.  This parameter improves bandwidth and
! performance of the RTC/Host or RTC/Lan sending the data and will also
! improve performance of the receiving application.
!
! This parameter is only applicable for SSL40 Bandwidth enhanced connections.
! These connections will be denoted as protocol "6" in the Mount statistics
! section of rtcmon.  At present, only the RTC, BGD source, or RCTIC
! running the SSL source adapter utilize this connection.
!
! This parameter should typically only be disabled if client applications
! at branch sites require lower latency at the cost of reduced throughput
! for the WAN distribution devices.
!
! Default value: True
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*rsslMsgPacking : True
!#help
!
! rsslMsgPacking : { True, False }
!
! This parameter defines whether multiple RSSL message will be packed by the
! RTC into a single RIPC message.  The RTC will batch messages to each channel
! up to flushInterval milliseconds or until the maximum message size of
! approximately 6000 bytes is reached.  This parameter improves bandwidth and
! performance of the RTC sending the data and will also improve performance
! of the receiving application.
!
! This parameter is only applicable for RSSL connections. These connections
! will be denoted as protocol "7" in the Mount Statistics section of rtcmon.
!
! This parameter should typically only be disabled if client applications
! at branch sites require lower latency at the cost of reduced throughput
! for the WAN distribution devices.
!
! Default value: True
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*wsMsgPacking : True
!#help
!
! wsMsgPacking : { True, False }
!
! This parameter defines whether multiple JSON messages will be packed by the
! RTC into a single HIPC message. The RTC will batch messages to each channel
! up to flushInterval milliseconds or until the maximum message size of
! approximately 6000 bytes is reached.  This parameter improves bandwidth and
! performance of the RTC sending the data and will also improve performance
! of the receiving application.
!
! This parameter is only applicable for WebSocket connections. These connections
! will be denoted as protocol "10" in the Mount Statistics section of rtcmon.
!
! This parameter should typically only be disabled if client applications
! at branch sites require lower latency at the cost of reduced throughput
! for the WAN distribution devices.
!
! Default value: True
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${port}"*timedWrites : True
!#help
!  timedWrites: { True, False }
!
!  This parameter defines whether the RTC will utilize a timed-based or
!  select based batching scheme for sending data to client applications.
!  The time-based batching scheme will batch data for each session up to
!  flushInterval milliseconds or 6000 bytes of data, whichever comes first.
!
!  The select-based batching scheme causes the RTC to register write I/O
!  events with each socket which causes data to be flushed whenever there is
!  space available for writing in the OS TCP/IP buffers for that socket.
!  This mechanism causes reduces latency in delivering updates but increases
!  CPU utilization when there is a large number of connected applications.
!
!  This parameter should only be set to False when there are a small number of
!  connected applications to the RTC that require very low latency in
!  retrieving market data.
!
!  Default value: False
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${port}"*flushInterval : 1
!#help
!  flushInterval: { 0 - 999 milliseconds }
!
!  For time-based batching (timedWrites is set to True), this parameter
!  is the interval in milliseconds at which the distributor will flush
!  buffered data for each connected application. Increasing this value
!  may increase update throughput for the distributor at the expense of
!  increased latency in delivering data.
!
!  To prevent high CPU usage, the value of the flushInterval used for
!  time-based flushing is forced to 1 millisecond as a minimum.
!
!  For SSL 4.0 bandwidth enhancement (ssl40be, protocol '6') channels with
!  sslMsgPacking set to True, and for RSSL (rssl, protocol '7') channels
!  with rsslMsgPacking set to True, this parameter is also used to define
!  the interval in milliseconds at which the RTC will batch messages to
!  each channel.
!
!  Unlike time-based batching, the minimum value of the flushInterval used
!  for message packing can be 0.
!
!  When the flushInterval is set to 0, the RTC will dynamically change the
!  interval to 1 to increase message packing during times of high water and
!  change the interval back to 0 once the channel comes out of high water.
!
!  Default value: 1
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${port}"*tcpSendBufSize : 64240
!#help
! tcpSendBufSize: { 1 - n bytes }
!
! Sets the TCP socket send buffer (SO_SNDBUF) size.
!
! Default value: Operating System Default
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${port}"*tcpRecvBufSize : 64240
!#help
! tcpRecvBufSize: { 1 - n bytes }
!
! Sets the TCP socket receive buffer (SO_RCVBUF) size.
!
! Recommendation: For optimal performance, this value should match the TCP
! socket send buffer (SO_SNDBUF) size on the sender for sizes larger than 64K.
!
! Default value: Operating System Default
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${port}"*maxIncomingBytesPerSecond : 0
! *rtc*"${route}".route*maxIncomingBytesPerSecond : 0
!#help
! maxIncomingBytesPerSecond: { 0 - n bytes }
!
! Publisher Rate Throttling will be enabled if value is non-zero. If enabled, this parameter
! determines the limit for number of bytes per second that will be read for the publishers
! on this port/route.
!
! Default value: 0
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${port}"*maxIncomingMessagesPerSecond : 0
! *rtc*"${route}".route*maxIncomingMessagesPerSecond : 0
!#help
! maxIncomingMessagesPerSecond: { 0 - n messages }
!
! Publisher Rate Throttling will be enabled if value is non-zero. If enabled, this parameter
! determines the limit for number of messages per second that will be read for the publishers
! on this port/route.
!
! Default value: 0
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
!*rtc*logMountRequests : False
!#help
! logMountRequests: { True, False }
!
! This parameter when set to true will turn on the logging of SSL, RSSL,
! and websocket client session connections and disconnections.
!
! Default value: False
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*portList : distribution_ssl_sink
!#help
!    portList: <port>
!
!    This parameter defines the port on which the RTC will listen on
!    for SSL client connections. Value can either be tcp service defined
!    in services file or an actual port number.
!
!    Default value: distribution_ssl_sink
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*disableHostLookup : True
!#help
! disableHostLookup: { True, False }
!
! This parameter when set to True disables the SSL client hostname lookup
! from IP address. The hostnames are only used for display purposes in the
! rtcmon. This must be set to True if the RTC machine cannot resolve the
! hostname from any possible SSL client IP addresses.
!
! Default value: False
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*interface :
!#help
! interface:
!
! This parameter allows administrators the ability to bind the SSL listening
! port to a specific network interface using either hostname or IP address.
!
! Default value: none
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*allowSSLConnections : True
!#help
! allowSSLConnections:  { True, False }
!
! Specifies whether the SSL sipc server will be opened for legacy SSL clients
! to access market feed.
!
! Default value: True
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*allowRSSLConnections : True
!#help
! allowRSSLConnections:  { True, False }
!
! Specifies whether the RIPC server will be opened for client using RSSL to
! access the Refinitiv Wire Format.
!
! Default value: True
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*allowWSConnections : True
!#help
! allowWSConnections:  { True, False }
!
!  Enables the WebSocket server for clients to access the JSON encoded data.
!
!  WARNING: Marketfeed services (dataType : 2) are NOT supported with WebSockets
!  as there is no direct conversion from Marketfeed to JSON. Marketfeed services
!  must be converted to RWF by setting the dataType to 6 in either the ADH or RTC
!  which will force automatic conversion from Marketfeed to RWF for the entire service
!  prior to conversion to JSON.
!
! Default value: True
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*rsslPort : distribution_rssl_sink
!#help
!    rsslPort: <port>
!
!    This parameter defines the port on which the RTC will listen for
!    RSSL client connections. Value can either be tcp service defined
!    in services file or an actual port number.
!
!    Default value: distribution_rssl_sink
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
!*rtc*"${port}"*connectionType : 0
!#help
!    connectionType: { 0 - 1 }
!
!    This parameter specifies the connection type for this server which will
!    listen for client connections on the specified port. The 'connectionType'
!    can be configured (in port scope) for each RSSL, WebSocket, and REST
!    server. There are currently two supported connection types:
!
!             0: Standard TCP socket
!             1: Encrypted connection
!
!    Default value: 0 (socket)
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
!*rtc*"${port}"*serverCert :
!#help
!    serverCert :
!
!    This parameter specifies the path and file name of the server certificate
!    for this encrypted server. This parameter can be configured (in port scope)
!    for each RSSL, WebSocket, and REST server and is only applicable if the
!    'connectionType' for the server is encrypted (1). For any other connection
!    types, this parameter has no effect.
!
!    Default value: none
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
!*rtc*"${port}"*serverPrivateKey :
!#help
!    serverPrivateKey :
!
!    This parameter specifies the path and file name of the server's private
!    key for this encrypted server. This parameter can be configured (in port
!    scope) for each RSSL, WebSocket, and REST server and is only applicable if
!    the 'connectionType' for the server is encrypted (1). For any other
!    connection types, this parameter has no effect.
!
!    Default value: none
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
!*rtc*"${port}"*cipherSuite :
!#help
!    cipherSuite :
!
!    This parameter specifies an optional OpenSSL-formatted cipher suite string
!    for this encrypted server. This parameter can be configured (in port scope)
!    for each RSSL, WebSocket, and REST server and is only applicable if the
!    'connectionType' for the server is encrypted (1). By default, both client
!    and server connections use default cipher selections recommended by OWASP,
!    if this parameter was left blank.
!
!    Note: It is recommended to leave this parameter blank and use the RTSDK
!    default, unless you actually have a requirement to change this (i.e. for
!    clients that are running with very old/ancient version connections.)
!
!    Default value: none
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
!*rtc*"${port}"*dhParams :
!#help
!    dhParams :
!
!    This parameter specifies an optional Diffie-Hellman parameter file for
!    this encrypted server. This parameter can be configured (in port scope)
!    for each RSSL, WebSocket, and REST server and is only applicable if the
!    'connectionType' for the server is encrypted (1). If this is not present
!    or left blank, RTSDK will load it's default built-in DH parameters set.
!
!    Note: It is recommended to leave this parameter blank and use the RTSDK
!    default, unless you actually have a requirement to generate your own
!    parameters (i.e. Due to clients not working with the larger default
!    cipher.)
!
!    Default value: none
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*wsPort : distribution_ws_sink
!#help
!    wsPort: <port>
!
!    This parameter defines the port on which the RTC will listen for
!    WebSocket connections. Value can either be tcp service defined
!    in services file or an actual port number.
!
!    Default value: distribution_ws_sink
!#end
!
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${port}"*serverToClientPings : False
!#help
!    serverToClientPings: { True, False }
!
!    Enable RSSL pinging from the RTC to the application.
!
!    Default value: False
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${port}"*clientToServerPings : False
!#help
!    clientToServerPings: { True, False }
!
!    Enable RSSL pinging from the application to the RTC. After pingTimeout
!    seconds without receiving a message or ping from the application,
!    the RTC will disconnect the application channel.
!
!    Default value: False
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${port}"*pingTimeout : 30
!#help
!    pingTimeout: { 3 - N seconds }
!
!    Maximum ping timeout in seconds the RTC will allow from an RSSL client
!    application. If clientToServerPings is enabled, the negotiated ping timeout
!    is the maximum time period in seconds the RTC will allow to not receive a
!    message or ping from an RSSL client application before disconnecting the
!    channel.
!
!    Default source-side value: 6
!    Default client-side value: 30
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${port}"*minPingTimeout : 6
!#help
!    minPingTimeout: { 3 - N seconds }
!
!    Minimum ping timeout in seconds the RTC will allow from an RSSL client
!    application.
!
!    Default value: 6
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${port}"*interfaceName :
!#help
!    interfaceName:
!
!    This parameter allows administrators the ability to bind RSSL and WebSocket
!    listening ports to a specific network interface using either the interface name,
!    hostname, or IP address.
!
!    Default value: none
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${port}"*reusePort : False
!#help
!    reusePort: { True, False }
!
!    This parameter sets the SO_REUSEPORT socket bind option and allows administrators
!    the ability for multiple RTC components running on the same host to bind to the
!    same RSSL listening port and have the operating system perform the connection
!    balancing. In order to enable this feature, every RTC instance running on the host
!    must have the parameter set to True or the socket bind will fail.
!
!    Default value: False
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${svc}"*convertVerifyNoSyncToCorrection : False
!#help
!    convertVerifyNoSyncToCorrection: { True, False }
!
!    When converting from RWF to Marketfeed, this parameter controls
!    whether to convert partial unsolicited RSSL refresh messages to
!    Marketfeed CORRECTION (317) updates (True) or Marketfeed VERIFY
!    NOSYNC (318 VER_SUB 4) images (False).
!
!    Default value: False
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*databaseDumpFile :
!#help
!    databaseDumpFile: { path and file name }
!
!    Specifies the location and name for dump file of RTC database.
!    This parameter is used when "dumpDatabase" variable in
!    rtcmon (Process Statistics) is changed to "True".
!
!    Default value: ./rtc.dump
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${svc}"*enableOverrideInsertRecordResp : False
!#help
!    enableOverrideInsertRecordResp: {True, False}
!
!    This parameter controls the conversion of RECORD RESPONSE message
!    (340) to VERIFY RECORD (318) for SSL Inserts.
!
!    Default value: False
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
! [Cache Management]
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*hashTableSize : 300000
!#help
!    hashTableSize: { 100 - N buckets }
!
!    Defines the number of hash buckets to be allocated in the RTC hash
!    table. This table is used to store information pertaining to all
!    items (across all services) which are open on the RTC.
!
!    Default value: 300000
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${svc}"*maxCacheSize :
!#help
!    maxCacheSize: { 0 - N items }
!
!    This parameter restricts overall cache size for a specific service
!    sourced from multiple routes. If set, the maxCacheSize value is enforced
!    in addition to the maxCache limit of individual routes.
!    This parameter is not necessary in case the service is sourced from only
!    one route.
!
!    Default value:
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
! [Thread]
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*bindMainThread :
!#help
!    bindMainThread:
!
!    This parameter specifies the physical mapping which binds the main
!    thread to the specified physical processor,core,thread:
!
!    This syntax specifies a physical cpu to bind to. P refers to processor, C
!    refers to core, and T refers to thread. If T:# is not specified, the thread
!    will be bound to all threads on the specified processor. If C is not
!    specified, the thread will be bound to all cores and threads on that
!    processor.
!
!    Specifying only a number causes a logical id to be bound instead of a
!    physical one.
!
!    Default value: None (no binding)
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*bindDNSThread :
!#help
!    bindDNSThread:
!
!    This parameter specifies the physical mapping which binds the DNS
!    thread to the specified physical processor,core,thread:
!
!    This syntax specifies a physical cpu to bind to. P refers to processor, C
!    refers to core, and T refers to thread. If T:# is not specified, the thread
!    will be bound to all threads on the specified processor. If C is not
!    specified, the thread will be bound to all cores and threads on that
!    processor.
!
!    Specifying only a number causes a logical id to be bound instead of a
!    physical one.
!
!    Default value: None (no binding)
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*bindThreadsByDefault :
!#help
!    bindThreadsByDefault :
!
!    This parameter specifies the physical mapping which binds all the
!    threads to the specified physical processor,core,thread:
!
!    The default binding can be overridden by binding threads individually.
!
!    This syntax specifies a physical cpu to bind to. P refers to processor, C
!    refers to core, and T refers to thread. If T:# is not specified, the thread
!    will be bound to all threads on the specified processor. If C is not
!    specified, the thread will be bound to all cores and threads on that
!    processor.
!
!    Specifying only a number causes a logical id to be bound instead of a
!    physical one.
!
!    Default value: None (no binding)
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*writerThreadCount : 4
!#help
!    writerThreadCount : { 1 - N }
!
!    Specifies the number of writer threads to configure for RTC. This number
!    should never exceed the number of available cores on the system. For 8
!    core systems, 4 writer threads tends to perform the best under most
!    workloads. For systems with more than 8 cores, more writer threads may
!    be beneficial but more than 4 threads should only be configured in a
!    production system if performance testing has been done to verify that this
!    is the case.
!
!    Default value: 4
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*bindWriteThread.${inst} :
!#help
!    bindWriteThread:
!
!    This parameter specifies the physical mapping which binds the particular
!    writer thread to the specified physical processor,core,thread:
!
!    bindWriteThread.1 : P:0 C:0 T:0
!    bindWriteThread.2 : P:0 C:1 T:0
!    bindWriteThread.3 : S:1
!    bindWriteThread.4 : 1
!
!    This syntax specifies a physical cpu to bind to. P refers to processor, C
!    refers to core, and T refers to thread. If T:# is not specified, the thread
!    will be bound to all threads on the specified processor. If C is not
!    specified, the thread will be bound to all cores and threads on that
!    processor.
!
!    Specifying only a number causes a logical id to be bound instead of a
!    physical one.
!
!    Default value: None (no binding)
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*restThread*bindRestThread :
!#help
!    bindRestThread :
!
!    This parameter specifies the physical mapping which binds the rest
!    thread to the specified physical processor, core, thread:
!
!    This syntax specifies a physical cpu to bind to. P refers to processor, C
!    refers to core, and T refers to thread. If T:# is not specified, the thread
!    will be bound to all threads on the specified processor. If C is not
!    specified, the thread will be bound to all cores and threads on that
!    processor.
!
!    Specifying only a number causes a logical id to be bound instead of a
!    physical one.
!
!    Default value: None
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
! [User]
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${user}"*"${svc}"*itemLimit : 2400
!#help
!    itemLimit:  { 1 - N items }
!
!    This parameter is normally scoped on a per-user per-service basis.
!    This is the maximum number of items which the specified user is allowed
!    to have open simultaneously on the specified service. If not defined,
!    value will default to aggregateItemLimit.
!
!    Default value: 2400
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${user}"*aggregateItemLimit : 2400
!#help
!    aggregateItemLimit: { 1 - N items }
!
!    This parameter may only be scoped at the user level (i.e. the service
!    name must be wild-carded). This is the maximum number of items which
!    the specified user is allowed to have open simultaneously on all
!    services combined.
!
!    Default value: 2400
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${user}"*itemLimitPerMount : aggregateItemLimit
!#help
!    itemLimitPerMount: { 1 - N items }
!
!    This parameter is normally scoped on a per user basis. This is the
!    maximum number of items which the specified user is allowed to have
!    open simultaneously on a single mount. The user can make additional
!    open requests by making an additional mount. If not defined, value
!    will default to aggregateItemLimit.
!
!    Default value: aggregateItemLimit
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
!*rtc*"${user}"*"${svc}"*defaultPriorityClass : 1
!#help
!    defaultPriorityClass: { 0 to (lockedItemThreshold - 1) }
!
!    These parameters may only be scoped on a per-user per-service basis (i.e.,
!    the serviceName field may NOT be wild-carded).
!    With respect to a user request:
!    1) If the requested item is specified in the 'itemPriorityFile' for the
!       target service (this parameter is specified in the distribution.config.service
!       file), the Sink Open priority class will be set to the priority class
!       assigned to this item by this file.
!    2) If the requested item is NOT specified in the 'itemPriorityFile' for the
!       target service:
!       a) If the user request contains the default priority (class 1, count 1)
!          and a 'defaultPriorityClass' is defined for the given user/service
!          pair, the Sink Open priority class will be set to  the
!          'defaultPriorityClass' value.
!       b) Otherwise, the Sink Open priority class will be set to the priority
!          class provided in the user request with the following exceptions:
!          i)  If a 'maxPriorityClass' is defined for the given user/service
!              pair and the priority class provided in the user request exceeds
!              this value, the Sink Open priority class will be set to the
!              'maxPriorityClass' value.
!          ii) If a 'maxPriorityClass' is NOT defined for the given user/service
!              pair and the priority class provided in the user request is
!              equal to or greater than the 'lockedItemThreshold' for the service
!              (this parameter is specified in the service_xxxx.cpd  file),
!              the Sink Open priority class will be set to the value
!              (lockedItemThreshold - 1).
!
!    Default value: 1
!
!    Note: If either of these parameters is defined, it must be set to a
!          value less than the 'lockedItemThreshold' defined for the service.
!          Per serviceName priority class must be defined manually.
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
!*rtc*"${user}"*"${svc}"*maxPriorityClass : 1
!#help
!    maxPriorityClass: { 0 to (lockedItemThreshold - 1) }
!
!    Please see help text for defaultPriorityClass.
!
!    Default value: 10
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${user}"*pingInterval : 30
!#help
!    pingInterval: { 1 - N seconds }
!
!    The number of seconds between ping messages. This value is passed to
!    the SSL API which negotiates the ping interval and ping timeout values
!    with the other side. The connection will be broken (and downstream
!    consumers will be notified) if no message is received for ping timeout
!    seconds (ping timeout is normally equal to three times the pingInterval).
!
!    This parameter is only applicable for SSL users. For RSSL users, refer
!    to pingTimeout and minPingTimeout in the RTC component and port configuration.
!
!    Default value: 30
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${user}"*pingKillInterval : 60
!#help
!    pingKillInterval: { 1 - N seconds }
!
!    This parameter may only be scoped at the user level (i.e., the serviceName
!    must be wild-carded).
!
!    This parameter defines the interval (in seconds) at which the RTC
!    expects a response to the Ping Request message sent to the SSL user
!    (sink application). If no message is received from the user within
!    'pingKillInterval' seconds after sending the Ping Request, the user
!    is dismounted. Note that any message received from the user will
!    suffice as a response to the Ping Request.
!
!    This parameter is only applicable for SSL users. For RSSL users, refer
!    to pingTimeout and minPingTimeout in the RTC component and port configuration.
!
!    Default value: 60
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${user}"*logNonRecoverableOpens : False
!#help
!    logNonRecoverableOpens: { True, False }
!
!    This parameter specifies whether or not the RTC will log non-recoverable
!    items requested by sink applications into the log file.
!
!    Default value: False
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
! [Admin]
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*logger*selector : *.info
!#help
!    selector:
!
!    This parameter defines the logging levels which will be enabled.
!    One of the following levels may be specified:
!     *.alert - Alerts are typically logged when communications problems are
!               encountered.
!     *.critical - These are logged when the RTC determines that it runs
!                  out of memory.
!     *.error - These are typically logged with problems on startup.
!     *.warning - These are typically logged when the RTC receives status
!                 or error messages from the host transport.
!     *.notice - These are only logged when the RTC starts and stops its
!                congestion control algorithm.
!     *.info  - Log selected information regarding normal operation.
!     *.debug - This logs information when rare item-level events occur. This
!               can trigger a lot of messages to be logged so it should only
!               be turned on when debugging.  The most common occurrence of
!               this is when gaps in the update stream are found.
!
!    Selecting a level will automatically log messages for levels above it.
!    For example selecting *.info will log *.alert, *.critical, *.error,
!    *.warning, *.notice and *.info messages.
!
!    Default value: *.info
!
!    Note, the default is probably sufficient for most purposes and
!    should not log unnecessary messages.
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*logger*file : ./rtc.log
!#help
!    file:
!
!    This is the name of the log file and the directory where it is to be
!    created. This may be either a full or relative path name.
!
!    Default value: log.out
!
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*logger*max_bytes : 3000000
!#help
!    max_bytes: { 100 - N bytes }
!
!    This is the maximum size (in bytes) that the log file may attain. When
!    this limit is reached, the log file will be moved to <log_file_name>.old,
!    overwriting any existing file with the same name. A new log file is then
!    opened with the same name as before.
!
!    If max_bytes value is set less than 100, the max_bytes value will be set
!    to 10000.
!
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*admin*sharedMemoryKey : 82
!#help
!    sharedMemoryKey:
!
!    The key to the shared memory segment created by the RTC to collect
!    statistics.
!
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*admin*semaphoreKey : 82
!#help
!    semaphoreKey:
!
!    The key to the semaphore used to protect the shared memory segment
!    while certain operation are performed on the shared memory.
!    Typically this value can have the same value as the sharedMemoryKey.
!
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*admin*sharedMemorySize : 12000000
!#help
!    sharedMemorySize: { 1 - N  bytes }
!
!    The size (in bytes) of the shared memory segment created.
!
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*admin*maxClients : 5
!#help
!    maxClients: { 1 - 16 }
!
!    Defines the maximum number of clients (e.g. rtcmon) which can be
!    attached to the shared memory concurrently.
!
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*convertToIDNStyle : True
!#help
!    convertToIDNStyle: { True, False }
!
!    This parameter controls the conversion of OMM data to Marketfeed data
!    between IDN style and non-IDN style.
!
!    For example:
!
!    convertToIDNStyle : True
!    INTEGER and PRICE will have '+0' for blank fields and '+' sign for positive value
!    TIME will have '  :  :  ' for blank fields
!
!    convertToIDNStyle : False
!    INTEGER and PRICE will have an empty(zero length) for blank fields
!    TIME will have an empty(zero length) for blank fields
!    All positive value will be converted without a '+' sign
!
!    Default value: True
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*enableNIPServer : False
!#help
!    enableNIPServer: { True, False }
!
!    This parameter enables creation of a RRCP
!    Multicast based virtual network for Publishing
!
!   Default value: False
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*checkNIPServicePerm : False
!#help
!    checkNIPServicePerm: { True, False }
!
!    This parameter controls whether the ADH should check NIP user permission
!    configuration in DACS. If this feature is enabled, and the user is not
!    entitled for NIP publishing, then the service will not be created and
!    all publish messages will be discarded.
!
!    Default value: False
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*disconnectNoNIPServicePerm : True
!#help
!    disconnectNoNIPServicePerm: { True, False }
!
!    This parameter controls whether the ADH should disconnect NIP user
!    if the permission check failed. Should this and "checkNIPServicePerm"
!    are enabled, and the publishing user failed to pass the check, the NIP
!    connection will be disconnect (force logout).
!
!    Default value: True
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*nip.source.RRCP*bindRRCPEngineThread :
!#help
!    bindRRCPEngineThread :
!
!    This parameter specifies the physical mapping which binds the NIP (mcE,P2P)
!    threads to the specified physical processor,core,thread:
!
!    This syntax specifies a physical cpu to bind to. P refers to processor, C
!    refers to core, and T refers to thread. If T:# is not specified, the thread
!    will be bound to all threads on the specified processor. If C is not
!    specified, the thread will be bound to all cores and threads on that
!    processor.
!
!    Specifying only a number causes a logical id to be bound instead of a
!    physical one.
!
!    Default value: None (no binding)
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*auditTimeStampUpdateInterval : 20
!#help
!   auditTimeStampUpdateInterval: { 1 - N milliseconds }
!
!   This parameter specifies time interval in miliseconds for
!   updating internal system time used in audit information for
!   an item. Item Audit information is comprised of timestamp of
!   last update and info of user who made the last update.
!
!   Default value: 20
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*softwareStatsReportTime :
!#help
!
!   This parameter is a comma separated list of time of the day when the software
!   statistics should be reported. This list is sorted. The time of the day is in
!   the 24-hour notation in the form hh:mm( for example 01:23 )
!   The default being once per day at 23:45 PM local time.
!   eg: *softwareStatsReportTime: 11:45, 15:10, 16:10
!
! Default value:
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*primeTopology : True
!#help
!   primeTopology: { True, False }
!
!   If set to true, the RTC loads CPU topology information to be used for binding
!   the threads. For external process binding (using a script, etc.),
!   primeTopology should be set to False.
!
!   Default value: True
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
! [DACS]
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*dacs*doMultiConnect : False
!#help
!    doMultiConnect: { True, False }
!
!    This parameter may be used to turn DACS Multi Connect on/off.
!    SSL Source applications must use this parameter to decide if
!    the RTC should connect to Multiple DACS daemons such that
!    different users can be logged into different DACS sites so
!    that the profile request can be sent to the appropiate daemon.
!
!    Default value: False
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*dacs*domainList :
!#help
!    domainList:
!
!    A comma-separated list of this components dacs domain. Each
!    domain defines a connection to a dacs deamon. The domain
!    names are simply labels used to identify the dacs daemon for
!    configuration purposes. Each domain needs to be further configured
!    for its port and optionally for login letter case enforcement.
!
!    This is valid only for doMultiConnect is enabled
!
!    Default value: none
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*authentication*tokenAuthenticationHosts :
!#help
!    tokenAuthenticationHosts:
!
!    Comma-separated list of token authenticator hosts.
!
!    Default value: None (feature disabled)
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*authentication*authThreads : 1
!#help
!    authThreads: { 1 - n threads }
!
!    Number of authentication library threads.
!
!    Default value: 1
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*authentication*connectTimeout : 15
!#help
!    connectTimeout: { 1 - 3600 seconds }
!
!    Timeout in seconds that the authentication library will wait for a response
!    from the token authenticator before failing.
!
!    Default value: 15 seconds
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*authentication*compatibilityMode : allow
!#help
!    compatibilityMode: { allow, expire, reject }
!
!    Controls authentication backward compatibility mode for applications
!    sending the authentication token as the username.
!
!    allow - Allow backward compatibility applications and never expire
!    the authentication token.
!
!    expire - Allow backward compatibility applications and expire the authentication
!    token should the token authenticator provide a token expiration time.
!
!    reject - Reject backward compatibility applications should the token authenticator
!    provide a token expiration time.
!
!    Default value: allow
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*authentication*iauth2Trace : False
!#help
!    iauth2Trace: { False, True }
!
!    Enables additional message tracing between the authentication library and the
!    token authenticator.
!
!    Default value: False
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*publisherWatchFormat :
!#help
!    publisherWatchFormat: crontab(5)
!
!    Enables and sets the publisher continuous watch timer within RTC or ADH.
!
!    Publisher continuous watch feature allows administrators the ability
!    to periodically log DACS usage information for publisher
!    which continue to be watched. Refer to the Linux 'man 5 crontab'
!    page for formatting information (time and date fields).
!
!    For example, "12:01 am on the 1st of the month":
!
!    *rtc*dacs*publisherWatchFormat : 1 0 1 * *
!
!    Default value: none (disabled)
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*dacs*watchFormat :
!#help
!    watchFormat: crontab(5)
!
!    Enables and sets the continuous watch timer within RTC.
!
!    Continuous watch feature allows administrators the ability
!    to periodically log DACS usage information for user items
!    which continue to be watched. Refer to the Linux 'man 5 crontab'
!    page for formatting information (time and date fields).
!
!    For example, "12:01 am on the 1st of the month":
!
!    *rtc*dacs*watchFormat : 1 0 1 * *
!
!    Default value: none (disabled)
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*dacs*maxStaggerMinutes : 60
!#help
!    maxStaggerMinutes: { 1 - 60 minutes }
!
!    Defines random range in minutes each RTC will stagger the continuous
!    watch timer to prevent all RTC instances from performing continuous
!    watch at the same time.
!
!    Default value: 60
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*dacs*watchTimerOpenHours : 24
!#help
!    watchTimerOpenHours: { 0 - 65535 hours }
!
!    Defines the number of hours that each user item must have been
!    open (start watch) in order to have DACS usage logged when
!    continuous watch is initiated from the continuous watch timer.
!
!    Default value: 24
!#end
!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
! [Delay Configuration]
!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${svc}"*delayEnabled : True
!#help
!
!   delayEnabled: { True, False}
!
!   This parameter specifies whether the service will enable delay capability.
!
!   Default value: True
!#end
!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${svc}"*remapDelayServiceName :
!#help
!    remapDelayServiceName:
!
!    This parameter provides ability to map the incoming service name
!    to a delay one before distributing to subscribers. This parameter takes
!    effect only when delayEnabled is True.
!
!    For example, the real-time service IDN_RDF is forwarded to the consumers
!    as dIDN_RDF by the component. This allows subscribers to differentiate
!    between real-time and delay service name and also allows granting
!    permission for the delay service separately from the real-time one.
!
!    Default value: NONE
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${svc}"*remapDelayServiceId :
!#help
!    remapDelayServiceId: { 256-65535 }
!
!    This parameter provides ability to map the incoming service id to a delay
!    one before distributing to subscribers. This parameter takes effect only
!    when delayEnabled is True. This allows subscribers to differentiate
!    between real-time and delay service id and also allows granting permission
!    for the delay service separately from the real-time one.
!
!    Default value: NONE
!#end
!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${svc}"*domainsDelayed : MARKET_PRICE
!#help
!    domainsDelayed :
!
!    This parameter is a comma-separated list of domains (numeric or shorthand) to
!    be delayed for this service. Any domain not in the list will not be delayed.
!
!        MARKET_PRICE (6)    : Quotes and Trades
!        MARKET_BY_ORDER (7) : Market by Order/Order Book Message
!        MARKET_BY_PRICE (8) : Market by Price/Market Depth Message
!        MARKET_MAKER (9)    : Market Maker Message
!
!    Custom (non-RDM) domains can be added to the list via numeric value.
!
!    Default value: MARKET_PRICE (6)
!#end
!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${svc}"*disableDelayItemList : ^n,^NFCP_UBMS$,^N2_STORY$,^N2_UBMS$,^NR_UBMS$,^WEB_UBMS$,^d,^.+#,^[0-9]*\\.AV\\.,^[0-9]*\\.PG\\.,^[0-9]*\\.PL\\.,^[0-9]*\\.NG\\.,^[0-9]*\\.NL\\.
!#help
!    disableDelayItemList:
!
!    This parameter is a comma separated list which specifies regular expressions
!    that specifies items which are not to be delayed.
!
!    Note: It is strongly recommended to disable delay for the items in default value.
!
!    Default value: ^n,^NFCP_UBMS$,^N2_STORY$,^N2_UBMS$,^NR_UBMS$,^WEB_UBMS$,^d,^.+#,^[0-9]*\\.AV\\.,^[0-9]*\\.PG\\.,^[0-9]*\\.PL\\.,^[0-9]*\\.NG\\.,^[0-9]*\\.NL\\.
!#end
!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${svc}"*disableDelayItemFile :
!#help
!    disableDelayItemFile: { path and file name }
!
!    This parameter specifies the path name (full or relative) of a
!    'disableDelayItem' file. This file must contain one regular expression
!    entry per line. Items with RIC names matching a regular expression in
!    the file will not be delayed.
!
!    Default value: NONE
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${svc}"*blockDelayItemList : ^t
!#help
!    blockDelayItemList :
!
!    This parameter is a comma separated list which specifies regular expressions
!    that specifies items which are blocked. This parameter is only applicable when
!    enabling delay.
!
!    Note: the default value is time and sales data. If clients would like to enable
!          delay time and sales data, ^t must be removed from this parameter and exchange
!          time zone information have to be configured in the delay configuration file.
!
!    The delay time and sales data will be delayed for one day if its criteria matches
!    with one of below:
!
!    - Exchange of delay time and sales data does not match with any configured exchange
!      time zone information.
!
!    Default value: ^t
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${svc}"*delayConfigFile : ./delay.rules.cf
!#help
!    delayConfigFile: { path and file name }
!
!    This parameter specifies the path name (full or relative) of delay
!    configuration file for service. The delay configuration file contains
!    delay rules. Delay rule should be specified using only one method whether
!    exchange name base or PE base.
!
!    Default value: ./delay.rules.cf
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${svc}"*delayFileLimit : 2048
!#help
!    delayFileLimit: { 2048 - N }
!
!    This parameter allows the component to specify the maximum size (in kbytes)
!    of a temporary file for delaying data. The default and minimum limit is
!    temp files of around 2MB in size and the only reason likely necessary to set
!    delayFileLimit is for testing.
!
!    Default value: 2048
!#end
!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${svc}"*delaySpaceThreshold : 2048
!#help
!    delaySpaceThreshold: { 2048 - N }
!
!    This parameter allows the component to specify a value of threshold for
!    switching between primary and secondary directories for writing temporary
!    files. When the free space of the primary directory is lower than this
!    threshold, the component will swap to the secondary directory. The component
!    will continue writing temporary files to the secondary directory until the
!    space of primary directory becomes available more than this threshold.
!    Then component will swap back to the primary directory. This parameter must
!    not be set to a value lower than delayFileLimit as RTC needs at least
!    delayFileLimit to write a temporary file to disk.
!
!    Default value: 2048
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${svc}"*delayReplayCutoff : 1250
!#help
!    delayReplayCutoff: { 1250 - N }
!
!    This parameter specifies the number of data messages read from temporary
!    files by the component per round. This parameter is applied when flushing
!    data at the end of a feeliable period (configured by TIME_PERIODS).
!    Flushing data will be periodically performed to prevent the component from
!    spending too much time on this mechanism.
!
!    Note: If value is set less than 1250, it will be set to 1250.
!
!    Default value: 1250
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${svc}"*delayReleaseCutoff : 10000
!#help
!    delayReleaseCutoff : { 1250 - N }
!
!    This parameter specifies the maximum number of data messages read from temporary
!    files by the component per round. The data message is read once the delay time
!    has been reached.
!
!    The value of this parameter should be high enough to support maximum throughput.
!    Setting this parameter too high can cause CPU spikes as the component processes
!    a numbers of messages per round; setting it too low can be a bottleneck and
!    restrict throughput.
!
!    Note: If value is set less than 1250, it will be set to default.
!
!    Default value: 10000
!
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${svc}"*delayPrimaryDir :
!#help
!    delayPrimaryDir:
!
!    This parameter specifies a path name of the primary directory in which
!    to write temporary files to disk.
!
!    Note: Defining delayPrimaryDir to a directory resides in RAM disk will
!    greatly improve performance of component. Since the size of RAM disk is
!    limited, the delaySecondaryDir should be a directory on local disk and
!    must be large enough to store data when the RAM disk is full.
!
!    Default value: NONE
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${svc}"*delaySecondaryDir :
!#help
!    delaySecondaryDir:
!
!    This parameter specifies a path name of the secondary directory in which to
!    write temporary files to disk.
!
!    Note: Defining delayPrimaryDir to a directory resides in RAM disk will greatly
!    improve performance of component. Since the size of RAM disk is limited, the
!    delaySecondaryDir should be a directory on data storage and must be large enough
!    to store data when the RAM disk is full.
!
!    Default value: NONE
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${svc}"*vendorDelayedSubjectText :
!#help
!    vendorDelayedSubjectText:
!
!    This parameter specifies additional information to be sent along with
!    the refresh messages of vendor delayed data.
!
!    Default value: NONE
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
!*rtc*"${svc}"*blockedSubjectText :
!#help
!    blockedSubjectText:
!
!    This parameter specifies additional information to be sent along with
!    the status messages for blocked items. Items are blocked because their
!    PE are always charged (e.g. DELTA_TIME = -1), or the delay rule is
!    configured to block that instruments ( BLOCKED_ITEMS is configured), or
!    the component is unable to find the derived rule in the delay configuration
!    file (e.g. BLOCK_INVALID_EXCHANGE_FNAME is TRUE).
!
!    Default value: None
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${svc}"*delayTrace : False
!#help
!    delayTrace: { True, False }
!
!    This parameter specifies whether the service will enable delay trace.
!
!    Default value: False
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${svc}"*feeliableFieldList : TRDPRC_1,TRDPRC_2,TRDPRC_3,\
!TRDPRC_4,TRDPRC_5,NETCHNG_1,HIGH_1,LOW_1,OPEN_PRC,BID,BID_1,BID_2,ASK,\
!ASK_1,ASK_2,BIDSIZE,ASKSIZE,ACVOL_1,PCTCHNG,OPEN_BID,YRHIGH,YRLOW,\
!LIFE_LOW,LIFE_HIGH,TURNOVER,MID_PRICE,MID_NET_CH,TRDVOL_1,BID_HIGH_1,\
!BID_LOW_1,YRBIDHIGH,YRBIDLOW,SEC_ACT_1,SEC_ACT_2,SEC_ACT_3,SEC_ACT_4,\
!SEC_ACT_5,DEALT_VL1,VOL_X_PRC1,WEIGHTING
!#help
!    feeliableFieldList:
!
!    A comma separated a list of fields that are exchange fee liable.
!    All other fields are considered to be non-fee liable. If FEELIABLE_FIELDS
!    does not exist in the delay configuration file or contains an empty list,
!    all fields are considered to be feeliable.
!
!    Default value: NONE
!#end
!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*${svc}"*processDelayFNameInUpdate : False
!#help
!    processDelayFNameInUpdate: { True, False }
!
!    This parameter controls whether the RTC applies the DELAY_FNAME
!    functionality to all update messages. Enabling this parameter may cause the
!    RTC performance to be significantly dropped as the RTC has to inspect the
!    specified field in every update messages.
!
!    Default value: False
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${svc}"*initialResponseForDelayedData : NON_FEELIABLE
!#help
!    initialResponseForDelayedData : { NO_RESP, CONFIG, NON_FEELIABLE }
!
!    Define an initial response that clients would like to receive
!    when vendor-delayed data is not available.
!
!    There are three possible values:
!
!    NO_RESP
!    Clients will not get any response if delayed data is not ready
!    in the cache. When this option is configured, it is possible that
!    item requests will be timed-out by downstream components/applications
!    (e.g. RTC or client applications) since the initial response needs to
!    be hold up for a configured delay time. Users have to ensure that
!    the downstream components/applications have been configured not to
!    time-out item requests before using this option.
!
!    CONFIG
!    Clients can configure the content in initial response that they
!    would like to receive. To define the initial response, kindly see
!    "initialFieldValueListForDelay", "initialStatusForDelay" and
!    "initialFLNForDelay" parameters.
!
!    NON_FEELIABLE
!    Clients will receive a non-feeliable image which is created from
!    the real-time image received. All values of the fields specified
!    in "feeliableFieldList" will be replaced with blank values.
!
!    Default Value: NON_FEELIABLE
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${svc}"*initialFieldValueListForDelay : DSPLY_NAME, Being Delayed
!#help
!    initialFieldValueListForDelay :
!
!    Define a set of fid-value pairs that presents in the initial image for delay.
!    This parameter is only applicable if "initialResponseForDelayedData" is set to
!    CONFIG.
!
!    A comma separated list of FID and value pairs.
!    All fields must be text (MF ALPHANUMERIC).
!    The FIDs may be specified by either numeric or ACRONYM.
!    FID range is -32768 to 32767, with zero (0) being an illegal value.
!
!    Default Value: DSPLY_NAME, Being Delayed
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${svc}"*initialStatusForDelay : STALE
!#help
!    initialStatusForDelay : {OK, STALE}
!
!    Define data state of the initial image for delay.
!    This parameter is only applicable if "initialResponseForDelayedData" is set to
!    CONFIG.
!
!    Default Value: STALE
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${svc}"*initialFLNForDelay :
!#help
!   initialFLNForDelay :
!
!   Define FLN of the initial image for delay.
!   This parameter is only applicable if "initialResponseForDelayedData" is set to
!   CONFIG. Supported range is -32768 to 32767 and will default to zero(0) if no
!   value is provided; However zero (0) is not recommended as any Marketfeed device
!   receiving a message containing an FLN of zero may treat this as an exception
!   condition. This parameter requires administrator attention when setting the
!   initialResponseForDelayedData to CONFIG.
!
!   Default Value: NONE
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${svc}"*timeAndSalesScrollingCharacters : " $ & ' ( ) + , - : ; < = > @ ] ^ _ a b c d e f g h i j k l m n o p q r s t u v w x y z { | } ~
!#help
!   timeAndSalesScrollingCharacters :
!
!   Define the subsequent Time and Sales requests of the Time and Sales chain.
!   If the second character of the symbol name matches one of the scrolling characters,
!   The component will not applied TAS algorithm to the requests and deliver the requests
!   as real-time data. The list of scrolling characters may be updated over the time.
!   The list needs to be synchronized with the implementation on IDN.
!
!   Default Value: NONE
!
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${svc}"*useDacsLockFrom : VENDOR_DELAYED
!#help
!   useDacsLockFrom : { VENDOR_DELAYED, REALTIME, ALL }
!
!   Specify RTC where to obtain DACS lock from. The obtained DACS lock will be provided
!   to consumer applications for data permissioning. Three possible values are:
!
!   VENDOR_DELAYED
!   The RTC will obtain DACS lock from delayed instruments on IDN (/RICs), if they exist.
!   Otherwise, DACS lock from real-time instrument will be applied. This option is
!   recommended in order to separate permissioning between delayed data and real-time data.
!
!   REALTIME
!   The RTC will obtain DACS lock from real-time instruments, if they exist.
!    Otherwise, DACS lock from delayed instrument on IDN (/RICs) will be applied.
!
!   ALL
!   Clients will receive the vendor-delayed DACS lock whenever real-time data is delayed by
!   the component and then receives the real-time DACS lock after the delay time.
!
!   Default value: VENDOR_DELAYED
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${svc}"*enableVisiblePublisherId: False
!#help
!
!    enableVisiblePublisherId: { True, False }
!
!    This parameter enables the Visible Publisher Identifier (VPI) feature for this service.
!    Note that a capability license is also required to operate this feature.
!
!    The VPI feature will place the unique user information from a post/insert message
!    into the payload of a message using user-defined FIDs (vpiUserIdFID and vpiUserAddrFID).
!    The information is then stored in cache in the ADH, or forwarded to the publisher.
!    The user information is comprised of a user identifier, and an optional user
!    address (IP address).
!
!    Default value: False
!
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${svc}"*vpiUserIdFID:
!#help
!
!    vpiUserIdFID:
!
!    The vpiUserIdFID field defines the FID to be used to provide the Visible Publisher
!    Identifier (VPI) User Identifier. The User Identifier uniquely identifies a
!    DACS user who has permissions to send posts or inserts. This is a
!    user-defined FID which must be defined in the RDMFieldDictionary. The value
!    can be configured to the field ACRONYM, DDE ACRONYM, or FID.
!    The vpiUserIdFID is mandatory for the VPI feature to work.
!
!    Default value: 0
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${svc}"*vpiUserAddrFID:
!#help
!
!    vpiUserAddrFID:
!
!    The vpiUserAddrFID field defines the FID to be used to provide the Visible Publisher
!    Identifier (VPI) User Address (IP address of the user machine). This is a
!    user-defined FID which must be defined in the RDMFieldDictionary. The value
!    can be configured to the field ACRONYM, DDE ACRONYM, or FID.
!    The vpiUserAddrFID is optional for the VPI feature to work.
!
!    Default value: 0
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${inst}".route*"${svc}"*enableVPIUpstream: False
!#help
!
!    enableVPIUpstream:
!
!    Part of the Visible Publisher Identifier (VPI) feature, the enableVPIUpstream
!    parameter will add the unique user information fields to the payload of a message
!    to be sent to upstream sources such as a publisher.  When disabled, the message
!    is not modified to contain user information from post or insert messages.  This
!    helps protect publishers which may not know the corresponding user information
!    FIDs or prevent broadcast of the FIDs to a wider network.
!
!    Default value: False
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${inst}".route*"${svc}"*enableVPIDownstream: True
!#help
!
!    enableVPIDownstream:
!
!    Part of the Visible Publisher Identifier (VPI) feature, the enableVPIDownstream
!    parameter will add the unique user information fields to the payload of a message
!    to be sent to downstream sources such as ADH cache or client applications.
!    When disabled, the message is not modified to contain user information from post
!    or insert messages.  This prevents the ADH cache from containing the
!    user information FIDs and downstream clients from receiving the user information
!    FIDs.
!
!    Default value: True
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${svc}"*enableAuditTimestamp: False
!#help
!
!    enableAuditTimestamp: { True, False }
!
!    This parameter enables the Audit Timestamp feature for this service.
!
!    The Audit Timestamp feature will place the timestamp from a post/insert message
!    into the payload of a message using user-defined FIDs (auditTimestampDateFID and
!    auditTimestampTimeFID).
!    The information is then stored in cache in the ADH or forwarded to the publisher.
!
!    Default value: False
!
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${svc}"*auditTimestampDateFID:
!#help
!
!    auditTimestampDateFID:
!
!    The auditTimestampDateFID field defines the FID to be used to provide the audit
!    timetsamp date field. This is a user-defined FID which must be defined in the
!    RDMFieldDictionary. The value can be configured to the field ACRONYM,
!    DDE ACRONYM, or FID.
!    The auditTimestampDateFID is optional for the audit timestamp feature to work.
!
!    Default value: 0
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${svc}"*auditTimestampTimeFID:
!#help
!
!    auditTimestampTimeFID:
!
!    The auditTimestampTimeFID field defines the FID to be used to provide the audit
!    timetsamp time field. This is a user-defined FID which must be defined in the
!    RDMFieldDictionary. The value can be configured to the field ACRONYM,
!    DDE ACRONYM, or FID.
!    The auditTimestampTimeFID is optional for the audit timestamp feature to work.
!
!    Default value: 0
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${inst}".route*"${svc}"*enableAuditTimestampUpstream: False
!#help
!
!    enableAuditTimestampUpstream:
!
!    Part of the Audit Timestamp feature, the enableAuditTimestampUpstream
!    parameter will add the audit timestamp fields to the payload of a message
!    to be sent to upstream sources such as a publisher.  When disabled, the message
!    is not modified to contain user information from post or insert messages.  This
!    helps protect publishers which may not know the corresponding user information
!    FIDs or prevent broadcast of the FIDs to a wider network.
!    NOTE: if the 'enableAuditTimestampUpstream' and 'enableAuditTimestampDownstream'
!    variables are both 'False', the audit timestamp feature will be disabled.
!
!    Default value: False
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${inst}".route*"${svc}"*enableAuditTimestampDownstream: True
!#help
!
!    enableAuditTimestampDownstream:
!
!    Part of the Audit Timestamp feature, the enableAuditTimestampDownstream
!    parameter will add the audit timestamp fields to the payload of a message
!    to be sent to downstream sources such as ADH cache or client applications.
!    When disabled, the message is not modified to contain user information from post
!    or insert messages.  This prevents the ADH cache from containing the
!    user information FIDs and downstream clients from receiving the user information
!    FIDs.
!    NOTE: if the 'enableAuditTimestampUpstream' and 'enableAuditTimestampDownstream'
!    variables are both 'False', the audit timestamp feature will be disabled.
!
!    Default value: False
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*${route}.route*useReactor : False
!#help
!   useReactor:
!
!   This parameter specifies whether this route uses Reactor connection or not.
!
!   Default value: False
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*${route}.route*rsslConnectionType : socket
!#help
!   rsslConnectionType : { socket, encrypted }
!
!   This parameter specifies the connection type for this route.
!
!   Default value: socket
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*${route}.route*encryptionProtocol : TLSv1.2
!#help
!   encryptionProtocol : { TLSv1.2 }
!
!   This parameter specifies the encrytption protcol for the connection, if the connection
!   type for this route is set to encrypted. For any other connection types, this parameter
!   has no effect.
!
!   Default value: TLSv1.2
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*${route}.route*proxyHost :
!#help
!   proxyHost :
!
!   This parameter specifies the proxy host name if one is required to make the connection
!   to the route destination host.
!
!   Default value: none
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*${route}.route*proxyPort :
!#help
!   proxyPort :
!
!   This parameter specifies the proxy port number if a proxy host is required to make the
!   connection to the route destination host.
!
!   Default value: none
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*${route}.route*authenticationMethod : none
!#help
!   authenticationMethod: { none, oAuthPasswordGrant, oAuthClientCred }
!
!   This parameter specifies the token authentication method this route enables within the
!   RTSDK Reactor. For connectivity into Refinitiv Real-Time Optimized, this value must be
!   set to 'oAuthPasswordGrant' or 'oAuthClientCred'.
!
!   Default value: none
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*${route}.route*serviceDiscovery : True
!#help
!   serviceDiscovery: { True, False }
!
!   This parameter specifies whether this route enables EDP service discovery. When enabled
!   endpoint selection is choosen based on location parameter and hostList and port are not
!   used. If disabled, hostList and port are used for endpoint connection as usual.
!
!   Default value: True
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*${route}.route*location : us-east
!#help
!   location:
!
!   This parameter specifies the location used for service discovery endpoint selection.
!
!   Standard Locations (multiple availability zones)
!      us-east
!      eu-west
!      ap-southeast
!
!   Premium Locations (single availability zone)
!      us-east-1a
!      us-east-1b
!      us-east-2a
!      us-east-2b
!      eu-west-1a
!      eu-west-1b
!      ap-southeast-1a
!      ap-southeast-1b
!
!   Default value: us-east
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*${route}.route*userPassword :
!#help
!   userPassword:
!
!   This parameter is the user password on the route and is used along with userName (rssl_route) as the
!   credentials to log into EDP for service discovery and token management. The value is obfuscated and
!   the obfuscation tool (dacsObfuscatePassword) must be used to obfuscate the password prior to setting
!   the value here.
!
!   Default value: none
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*${svc}*defaultSourceGroupList :
!#help
!
!   defaultSourceGroupList: 1, 2, 3 ...
!
!   This parameter contains a default source group or the list of default
!   source groups.
!
!   When not set (empty list), there won't be any default groups
!   associated with non-interactive publisher, but since items must belong to
!   a group, all items created via update will be assigned to group
!   Id of 0 (zero).
!
!   When set, the list of default source groups will be associated with each
!   non-interactive publisher during start up of the application.
!
!   ADH generates group outage notifications whenever a publisher goes down.
!   In cases where there are no refreshes (because the cache was built from
!   updates; i.e., buildCacheFromUpdates was enabled or the cache was
!   downloaded from a resilient/persistent cache etc.), items (created via
!   updates)  will be assigned to the first group ID from the
!   defaultSourceGroupList list.
!
!   Default value: <None>
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
! [Simplified JSON Configuration]
!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*defaultJsonServiceId :
!#help
!    defaultJsonServiceId { 256 - 65535 }
!
!    To define the default service for the WebSocket client applications.
!    The service can be overridden in the JSON request message.
!
!    If defaultJsonServiceId is empty, there will be no default service id.
!    The WebSocket applications have to always specify a service in the item requests.
!
!    Default value:
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*jsonExpandedEnumFields : True
!#help
!    jsonExpandedEnumFields: { True, False }
!
!    To specify whether the RTC sends display values for all enumerated fields
!    in the simplified JSON messages.
!
!    Default value: True
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*defaultJsonQosDynamic : False
!#help
!    defaultJsonQosDynamic: { True, False }
!
!    To specify whether the RTC sets the QoS to be dynamic stream by default.
!    The dynamic stream will allow QoS to be changed when the service group feature
!    is enabled.
!
!    Default value: False
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*catchUnknownJsonKeys : False
!#help
!    catchUnknownJsonKeys: { True, False }
!
!    To specify how the RTC reacts when an unknown JSON key is received.
!
!    If this parameter is set to False, the RTC simply ignores unknown JSON keys
!    and continue processing the JSON message.
!
!    If this parameter is set to True, the JSON messages with unknown JSON keys
!    will be dropped. The RTC also generates a JSON error message and send it back
!    to the WebSocket client.
!
!    Default value: False
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*catchUnknownJsonFids : True
!#help
!    catchUnknownJsonFids: { True, False }
!
!    To specify how the RTC reacts when unknown FIDS are present in JSON messages.
!
!    This parameter is only applicable to the JSON messages with the Field List
!    container received from posting applications or providers.
!
!    If this parameter is set to False, the RTC simply ignores unknown FIDs
!    and continue processing the JSON message.
!
!    If this parameter is set to True, the JSON messages with unknown JSON FIDs
!    will be dropped. The RTC also generates a JSON error message and send it back
!    to the WebSocket client.
!
!    Default value: True
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
! *rtc*"${port}"*positionName : AuthPosition
!#help
!    positionName:
!
!    To specify the name of the position entity that the WebSocket clients have to put
!    in the cookies when a WebSocket connection is established.
!
!    This intends to facilitate the automatic login feature where the RTC can
!    genereate a login request message based on the credentials stored in the cookie.
!
!    This parameter is only used in conjunction with new authentication feature.
!
!    Default value: AuthPosition
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${port}"*applicationIdName : applicationId
!#help
!    applicationIdName:
!
!    To specify the name of the applicationId entity that the WebSocket clients have
!    to put in the cookies when a WebSocket connection is established.
!
!    This intends to facilitate the automatic login feature where the RTC can
!    generate a login request message based on the credentials stored in the cookie.
!
!    This parameter is only used in conjunction with new authentication feature.
!
!    Default value: applicationId
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"${port}"*authTokenName : AuthToken
!#help
!    authTokenName:
!
!    To specify the name of the token entity that the WebSocket clients have
!    to put in the cookies when a WebSocket connection is established.
!
!    This intends to facilitate the automatic login feature where the RTC can
!    generate a login request message based on the credentials stored in the cookie.
!
!    This parameter is only used in conjunction with new authentication feature.
!
!    Default value: AuthToken
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*enableRest : False
!#help
!    enableRest : { True, False }
!
!    Enables the REST server for clients to monitor distribution component.
!
!    Default value: False
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*restPort : distribution_rest_sink
!#help
!    restPort : distribution_rest_sink
!
!    This parameter defines the port on which the RTC listens for REST
!    connections. The value can either be the tcp service defined in the
!    services file or an actual port number.
!
!    Default value: distribution_rest_sink
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*rest*enableManageabilityResources : True
!#help
!    enableManageabilityResources : { True, False }
!
!    This parameter specifies whether the manageability resources are enabled on the REST server.
!
!    Default value: True
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*rest*enableSnapshotServer : False
!#help
!    enableSnapshotServer : { True, False }
!
!    Enables the snapshot server to accept requests via the REST interface.
!
!    Default value: False
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*rest*defaultSnapshotService :
!
!#help
!    defaultSnapshotService :
!
!    To define the default service for the REST snapshot requests.
!    The service can be overridden in either URI or the body of the HTTP request message.
!
!    If defaultSnapshotService is empty, there will be no default service.
!    The REST clients have to always specify a service in the HTTP requests.
!
!    This parameter is applicable only if 'enableSnapshotServer' is set to 'True'.
!
!    Default value: None
!#end
!
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*rest*defaultSnapshotUserName : RestSnapshot
!
!#help
!    defaultSnapshotUserName : RestSnapshot
!
!    To define the default userName for the REST snapshot requests.
!    The userName can be overridden in either URI or the body of the HTTP request message.
!
!    The REST clients have to provide userName in snapshot request when 
!    the DACS verification requirement is enabled. The userName is not required
!    when DACS verification is disabled; in such case, default userName is used.
!
!    This parameter is applicable only if 'enableSnapshotServer' is set to 'True'.
!
!    Default value: RestSnapshot
!#end
!
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*rest*restRequestTimeout : 60
!#help
!    restRequestTimeout : 60
!
!    The maximum period of time that the client application waits for a response.
!    If the REST request cannot be fulfilled within the time limit, an error
!    response will be sent back.
!
!    Default value: 60
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*rest*HTTPResponseHeaders : X-Frame-Options: deny, X-XSS-Protection: 1; mode=block, X-Content-Type-Options: nosniff
!#help
!    HTTPResponseHeaders : X-Frame-Options: deny, X-XSS-Protection: 1; mode=block, X-Content-Type-Options: nosniff
!
!    This parameter is a comma separated list of additional HTTP response headers
!    and values to include in all REST responses.
!
!    Default value: X-Frame-Options: deny, X-XSS-Protection: 1; mode=block, X-Content-Type-Options: nosniff
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*rest*allowedIPAddressList :
!#help
!    allowedIPAddressList :
!
!    This parameter is a comma separated list of IP addresses that are allowed
!    to manage and monitor distribution components through the REST interface. Only REST
!    requests coming from the IP addresses in the list will be allowed. A '-' can
!    be used to specify an IP range and a '*' for wilcard address.
!
!    Only IPv4 addresses are supported.
!
!    Default value: None
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*enableRestAudit : False
!#help
!    enableRestAudit : { True, False }
!
!    This parameter indicates whether REST audit events will be output to a file.
!
!    Default value: False
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*restAudit*file : ./rtc.rest.log
!#help
!    file :
!
!    This is the name of the REST audit file and the directory where it is to be created.
!    This may be either a full or relative path name.
!
!    Recommended value: ./rtc.rest.log
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*logger*max_bytes : 3000000
!#help
!    max_bytes: { 100 - N  bytes }
!
!    This is the maximum size (in bytes) that the log file may attain. When this
!    limit is reached, the log file will be moved to
!    <log_file_name>.old.<running_number>, overwriting any existing file with
!    the same name. A new log file is then opened with the same name as before.
!    The maximum of running number is configured by 'max_swapfiles' parameter.
!
!    If max_bytes value is configured less than 100, the max_bytes value
!    will be set to 10000.
!
!    Recommended value: 3000000
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*logger*max_swapfiles : 0
!#help
!    max_swapfiles: { 1 - 99 files }
!
!    This is the maximum number of files used when swapping the log output.
!    When the 'max_bytes' is reached, the log file will be moved to
!    <log_file_name>.old.<running_number>, overwriting any existing file
!    with the same name.  A new log file is then opened with the same name as before.
!    Whenever the running number is max_swapfiles value, the running number of
!    max_swapfiles will be reset to 1 and continue running.
!    If this value is set to '0',the log file will be moved to <log_file_name>.old
!    without running number.
!
!    Default value: 0
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*logger*timeStampFormat : %a %b %d  %H:%M:%S %Y
!#help
!    timeStampFormat: %a %b %d  %H:%M:%S %Y
!
!    Controls format of time string as provided by strftime().
!
!    Default value: %a %b %d  %H:%M:%S %Y
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*logger*microSecTimeStamps : False
!#help
!    microSecTimeStamps: { True, False }
!
!    Controls whether microseconds are printed in timestamps.  If the timestamp
!    format prints seconds at a fixed location in the time stamp string,
!    microseconds will be printed as a decimal fraction of the seconds.
!
!    Default value: False
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*"{resource}"*securityKey :
!#help
!    securityKey :
!
!    The obfuscated security key used to authenticate REST requests.
!    Different values of the security key can be associated to different
!    REST resource families with different HTTP verbs/methods.
!    The security keys must be obfuscated by the dacsObfuscatePassword tool
!    shipped in the distribution packages.
!
!    Default value: None
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*enableBatchSnapshots : True
!#help
!    enableBatchSnapshots: { True, False }
!
!    This parameter enables batch snapshot requests. If set to false, batch snapshot requests will be
!    rejected with closed statuses messages. Streaming batch requests are always allowed regardless of
!    the parameter.
!
!    Default value: True
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! *rtc*enableViews : True
!#help
!    enableViews: { True, False }
!
!    This parameter enables the view requests feature which allows applications to request specific
!    fields for a Level 1 record. If set to false, the view requests will be responded with full
!    images, the same as normal requests.
!
!    Default value: True
!#end
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
